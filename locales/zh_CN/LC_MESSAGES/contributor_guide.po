# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-23 14:44-0400\n"
"PO-Revision-Date: 2020-05-08 15:54+0800\n"
"Last-Translator: \n"
"Language: zh_CN\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../contributor_guide.rst:2
msgid "Contribution guidelines"
msgstr "开发贡献指南"

#: ../../contributor_guide.rst:4
msgid ""
"First of all, thank you for contributing! We welcome contributions of all"
" forms, including but not limited to"
msgstr "首先，感谢你的参与和贡献！我们欢迎一切形式的贡献，包括但不限于"

#: ../../contributor_guide.rst:7
msgid "Bug fixes"
msgstr "修复 BUG"

#: ../../contributor_guide.rst:8
msgid "Proposing and implementing new features"
msgstr ""

#: ../../contributor_guide.rst:9
msgid ""
"Documentation improvement and translations (e.g. `Simplified Chinese "
"<https://github.com/taichi-dev/taichi-docs-zh-cn>`_)"
msgstr ""

#: ../../contributor_guide.rst:10
msgid "Improved error messages that are more user-friendly"
msgstr "更友好的错误信息"

#: ../../contributor_guide.rst:11
msgid "New test cases"
msgstr ""

#: ../../contributor_guide.rst:12
#, fuzzy
msgid "New examples"
msgstr "新的示例程序"

#: ../../contributor_guide.rst:13
msgid "Compiler performance patches"
msgstr "编译器性能调优"

#: ../../contributor_guide.rst:14
msgid "Blog posts and tutorials on Taichi"
msgstr ""

#: ../../contributor_guide.rst:15
msgid "Participation in the `Taichi forum <https://forum.taichi.graphics/>`_"
msgstr ""

#: ../../contributor_guide.rst:16
msgid ""
"Introduce Taichi to your friends or simply star `the project "
"<https://github.com/taichi-dev/taichi>`_."
msgstr ""

#: ../../contributor_guide.rst:17
#, fuzzy
msgid ""
"Typo fixes in the documentation, code or comments (please directly make a"
" pull request for minor issues like these)"
msgstr "文档，代码，注释中的小笔误/拼写错误（这些小问题的话，请直接创建一个 PR 而不必开一个 issue）"

#: ../../contributor_guide.rst:20
msgid "How to contribute bug fixes and new features"
msgstr "如何参与修复 BUG ，添加新特性"

#: ../../contributor_guide.rst:22
#, fuzzy, python-format
msgid ""
"Issues marked with `\"good first issue\" <https://github.com/taichi-"
"dev/taichi/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22>`_"
" are great chances for starters."
msgstr ""
"标记了 `\"welcome contribution\" <https://github.com/taichi-"
"dev/taichi/issues?q=is%3Aopen+is%3Aissue+label%3A%22welcome+contribution%22>`_"
" 的 issue 是较容易上手的。"

#: ../../contributor_guide.rst:24
msgid ""
"Please first leave a note (e.g. *I know how to fix this and would like to"
" help!*) on the issue, so that people know someone is already working on "
"it. This helps prevent redundant work;"
msgstr ""
"请首先在这个 issue 中留下一句评论（比如： *我知道怎么解决这个，我乐意帮忙！* "
"）。这样大家就知道已经有人在解决这个问题了，从而避免重复劳动;"

#: ../../contributor_guide.rst:26
msgid ""
"If no core developer has commented and described a potential solution on "
"the issue, please briefly describe your plan, and wait for a core "
"developer to reply before you start. This helps keep implementations "
"simple and effective."
msgstr "如果没有维护人员说明一个 issue 可能的解决方案，请简要地描述你的计划，并在你动身之前静候维护人员的回复，从而保障实现的简洁高效。"

#: ../../contributor_guide.rst:29
#, fuzzy
msgid ""
"Issues marked with `\"welcome contribution\" <https://github.com/taichi-"
"dev/taichi/issues?q=is%3Aopen+is%3Aissue+label%3A%22welcome+contribution%22>`_"
" are slightly more challenging but still friendly to beginners."
msgstr ""
"标记了 `\"welcome contribution\" <https://github.com/taichi-"
"dev/taichi/issues?q=is%3Aopen+is%3Aissue+label%3A%22welcome+contribution%22>`_"
" 的 issue 是较容易上手的。"

#: ../../contributor_guide.rst:32
msgid "High-level guidelines"
msgstr "高阶指南"

#: ../../contributor_guide.rst:34
msgid "Be pragmatic: practically solving problems is our ultimate goal."
msgstr "实际解决问题是我们的终极目标。"

#: ../../contributor_guide.rst:35
msgid ""
"No overkills: always use *easy* solutions to solve easy problems, so that"
" you have time and energy for real hard ones."
msgstr "不要过头：用 *简单* 的方案去解决简单的问题，这样你可以抽出时间和精力来解决那些真正困难的问题。"

#: ../../contributor_guide.rst:36
msgid ""
"Almost every design decision has pros and cons. A decision is `good` if "
"its pros outweigh its cons. Always think about both sides."
msgstr "几乎每一个设计都有两面性。如果利大于弊，那就可以看作是一个 *好的决定* ，请务必权衡利弊。"

#: ../../contributor_guide.rst:37
msgid ""
"Debugging is hard. Changesets should be small so that sources of bugs can"
" be easily pinpointed."
msgstr "调试是很困难的，每一次的改动应该很小，这样 BUG 的源头就可以很容易地找到。"

#: ../../contributor_guide.rst:38
msgid "Unit/integration tests are our friends."
msgstr "单元/集成测试是我们的好伙伴。"

#: ../../contributor_guide.rst:41
msgid ""
"“There are two ways of constructing a software design: One way is to make"
" it so simple that there are obviously no deficiencies, and the other way"
" is to make it so complicated that there are no obvious deficiencies. "
"`The first method is far more difficult`.”     --- `C.A.R. Hoare "
"<https://en.wikipedia.org/wiki/Tony_Hoare>`_"
msgstr ""

#: ../../contributor_guide.rst:44
msgid "Effective communication"
msgstr "高效率地沟通"

#: ../../contributor_guide.rst:46
msgid ""
"How much information we effectively convey, is way more important than "
"how many words we typed."
msgstr "传达了多少有效信息，比我们打了多少字更重要。"

#: ../../contributor_guide.rst:47
msgid "Be constructive. Be polite. Be organized. Be concise."
msgstr "积极，有礼貌，有组织性，准确性。"

#: ../../contributor_guide.rst:48
msgid "Bulleted lists are our friends."
msgstr "无序列表/列清单是我们的好伙伴。"

#: ../../contributor_guide.rst:49
msgid ""
"Proofread before you post: if you are the reader, can you understand what"
" you typed?"
msgstr "提交评论前请仔细预读：如果你是读者，你能读懂自己所写的内容么？"

#: ../../contributor_guide.rst:50
msgid ""
"If you are not a native speaker, consider using a spell checker such as "
"`Grammarly <https://app.grammarly.com/>`_."
msgstr "如果你的母语不是英语，考虑使用拼写检查器，如 `Grammarly <https://app.grammarly.com/>`_ 。"

#: ../../contributor_guide.rst:54
msgid "Making good pull requests"
msgstr "做出良好的 PR"

#: ../../contributor_guide.rst:56
msgid ""
"PRs with **small** changesets are preferred. A PR should ideally address "
"**only one issue**."
msgstr "我们鼓励变化很小的 PR， 一个 PR 理想情况下应该 **只针对一个问题/issue** 。"

#: ../../contributor_guide.rst:58
msgid ""
"It is fine to include off-topic **trivial** refactoring such as typo "
"fixes;"
msgstr ""

#: ../../contributor_guide.rst:59
msgid ""
"The reviewers reserve the right to ask PR authors to remove off-topic "
"**non-trivial** changes."
msgstr ""

#: ../../contributor_guide.rst:61
msgid ""
"All commits in a PR will always be **squashed and merged into master as a"
" single commit**."
msgstr "PR 中的所有 commit 都会被 **挤压以合并进 master 分支的一个 commit 里** 。"

#: ../../contributor_guide.rst:62
msgid "PR authors **should not squash commits on their own**;"
msgstr ""

#: ../../contributor_guide.rst:63
msgid ""
"When implementing a complex feature, consider breaking it down into small"
" PRs, to keep a more detailed development history and to interact with "
"core developers more frequently."
msgstr "当实现一个复杂的特性时，考虑将其分为许多个小 PR，从而保证更具细节的开发时间线，保证与维护者更频繁的沟通。"

#: ../../contributor_guide.rst:64
msgid "If you want early feedback from core developers"
msgstr ""

#: ../../contributor_guide.rst:66
msgid ""
"Open a PR in `Draft <https://github.blog/2019-02-14-introducing-draft-"
"pull-requests/>`_ state on GitHub so that you can share your progress;"
msgstr ""

#: ../../contributor_guide.rst:67
msgid ""
"Make sure you @ the corresponding developer in the comments or request "
"the review."
msgstr ""

#: ../../contributor_guide.rst:69
msgid "If you are making multiple PRs"
msgstr "如果你在做很多个 PR"

#: ../../contributor_guide.rst:71
msgid ""
"Independent PRs should be based on **different** branches forking from "
"``master``;"
msgstr "互不依赖的 PR 应该被变基到来自 ``master`` 的 **不同** 分支;"

#: ../../contributor_guide.rst:72
msgid ""
"PRs with dependencies should be raised only after all prerequisite PRs "
"are merged into ``master``."
msgstr "互相依赖的 PR 应该在所有前置 PR 合并入 ``master`` 后才可以提出。"

#: ../../contributor_guide.rst:74
msgid "All PRs should ideally come with corresponding **tests**;"
msgstr "所有 PR 理想情况下应该伴随着相应的 **测试**;"

#: ../../contributor_guide.rst:75
msgid ""
"All PRs should come with **documentation update**, except for internal "
"compiler implementations;"
msgstr ""

#: ../../contributor_guide.rst:76
msgid "All PRs must pass **continuous integration tests** before they get merged;"
msgstr ""

#: ../../contributor_guide.rst:77
msgid "PR titles should follow :ref:`prtag`;"
msgstr ""

#: ../../contributor_guide.rst:78
msgid ""
"A great article from Google on `how to have your PR merged quickly "
"<https://testing.googleblog.com/2017/06/code-health-too-many-comments-on-"
"your.html>`_. `[PDF] <https://github.com/yuanming-"
"hu/public_files/blob/master/graphics/taichi/google_review_comments.pdf>`_"
msgstr ""

#: ../../contributor_guide.rst:82
msgid "Reviewing & PR merging"
msgstr ""

#: ../../contributor_guide.rst:84
msgid "Please try to follow these tips from Google"
msgstr ""

#: ../../contributor_guide.rst:86
msgid ""
"`Code Health: Understanding Code In Review "
"<https://testing.googleblog.com/2018/05/code-health-understanding-code-"
"in-review.html>`_; `[PDF] <https://github.com/yuanming-"
"hu/public_files/blob/master/graphics/taichi/google_understanding_code.pdf>`_"
msgstr ""

#: ../../contributor_guide.rst:87
msgid ""
"`Code Health: Respectful Reviews == Useful Reviews "
"<https://testing.googleblog.com/2019/11/code-health-respectful-reviews-"
"useful.html>`_. `[PDF] <https://github.com/yuanming-"
"hu/public_files/blob/master/graphics/taichi/google_respectful_reviews.pdf>`_"
msgstr ""

#: ../../contributor_guide.rst:89
msgid "The merger should always **squash and merge** PRs into the master branch;"
msgstr ""

#: ../../contributor_guide.rst:90
msgid "The master branch is required to have a **linear history**;"
msgstr ""

#: ../../contributor_guide.rst:91
msgid ""
"Make sure the PR passes **continuous integration tests**, except for "
"cases like documentation updates;"
msgstr ""

#: ../../contributor_guide.rst:92
msgid "Make sure the title follows :ref:`prtag`."
msgstr ""

#: ../../contributor_guide.rst:96
msgid "Using continuous integration"
msgstr ""

#: ../../contributor_guide.rst:98
msgid ""
"Continuous Integration (CI), will **build** and **test** your commits in "
"a PR against in environments."
msgstr ""

#: ../../contributor_guide.rst:99
msgid ""
"Currently, Taichi uses `Travis CI <https://travis-ci.org>`_ (for OS X and"
" Linux) and `AppVeyor <https://www.appveyor.com>`_ (for Windows)."
msgstr ""

#: ../../contributor_guide.rst:100
msgid "CI will be triggered every time you push commits to an open PR."
msgstr ""

#: ../../contributor_guide.rst:101
msgid ""
"You can prepend ``[skip ci]`` to your commit message to avoid triggering "
"CI. e.g. ``[skip ci] This commit will not trigger CI``"
msgstr ""

#: ../../contributor_guide.rst:102
msgid ""
"A tick on the right of commit hash means CI passed, a cross means CI "
"failed."
msgstr ""

#: ../../contributor_guide.rst:105
msgid "Enforcing code style"
msgstr ""

#: ../../contributor_guide.rst:106
msgid ""
"Locally, you can run ``ti format`` in the command line to re-format code "
"style. Note that you have to install ``clang-format-6.0`` and ``yapf "
"v0.29.0`` locally before you use ``ti format``."
msgstr ""

#: ../../contributor_guide.rst:107
msgid ""
"If you don't have to install these formatting tools locally, use the "
"**format server**. It's an online version of ``ti format``."
msgstr ""

#: ../../contributor_guide.rst:109
msgid "Go to http://kun.csail.mit.edu:31415/, and click at the desired PR id."
msgstr ""

#: ../../contributor_guide.rst:110
msgid ""
"Come back to the PR page, you'll see a user called @taichi-gardener (bot)"
" pushed a commit named ``[skip ci] enforce code format``."
msgstr ""

#: ../../contributor_guide.rst:111
msgid ""
"You won't see the bot's commit if it didn't find anything not matching "
"the format."
msgstr ""

#: ../../contributor_guide.rst:112
msgid ""
"Then please run ``git pull`` in your local branch to pull the formatted "
"code."
msgstr ""

#: ../../contributor_guide.rst:113
msgid ""
"Note that commit messages marked with ``[format]`` will automatically "
"trigger the format server. e.g. ``[format] your commit message``"
msgstr ""

#: ../../contributor_guide.rst:119
msgid "PR title format and tags"
msgstr ""

#: ../../contributor_guide.rst:120
msgid ""
"PR titles will be part of the commit history reflected in the ``master`` "
"branch, therefore it is important to keep PR titles readable."
msgstr ""

#: ../../contributor_guide.rst:122
msgid ""
"The first letter of the PR title body should be capitalized, unless the "
"title starts with an identifier:"
msgstr ""

#: ../../contributor_guide.rst:124
msgid ""
"E.g., \"[doc] improve documentation\" should be formatted as \"[doc] "
"Improve documentation\";"
msgstr ""

#: ../../contributor_guide.rst:125
msgid ""
"\"[Lang] ti.sqr(x) is now deprecated\" is fine because ``ti`` is an "
"identifier."
msgstr ""

#: ../../contributor_guide.rst:127
msgid "Please do not include back quotes (\"`\") in PR titles."
msgstr ""

#: ../../contributor_guide.rst:128
msgid "Please always prepend at least one tag such as ``[Metal]`` to PR titles:"
msgstr ""

#: ../../contributor_guide.rst:130
msgid ""
"When using multiple tags, make sure there is exactly one space between "
"tags;"
msgstr ""

#: ../../contributor_guide.rst:131
msgid ""
"E.g., \"[Metal][refactor]\" (no space) should be formatted as \"[Metal] "
"[refactor]\";"
msgstr ""

#: ../../contributor_guide.rst:133
msgid ""
"For example, \"[Metal] Support bitmasked SNode\", \"[OpenGL] "
"AtomicMin/Max support\", or \"[Opt] [IR] Enhanced constant folding\"."
msgstr ""

#: ../../contributor_guide.rst:135
msgid "Existing tags:"
msgstr ""

#: ../../contributor_guide.rst:137
msgid "``[Metal], [OpenGL], [CPU], [CUDA], [AMDGPU], [LLVM]``: backends;"
msgstr ""

#: ../../contributor_guide.rst:138
msgid "``[LLVM]``: the LLVM backend shared by CPUs and CUDA;"
msgstr ""

#: ../../contributor_guide.rst:139
msgid "``[Lang]``: frontend language features, including syntax sugars;"
msgstr ""

#: ../../contributor_guide.rst:140
msgid "``[Std]``: standard library, e.g. ``ti.Matrix`` and ``ti.Vector``;"
msgstr ""

#: ../../contributor_guide.rst:141
msgid "``[IR]``: intermediate representation;"
msgstr ""

#: ../../contributor_guide.rst:142
msgid ""
"``[Sparse]``: sparse computation, dynamic memory allocator, and garbage "
"collection;"
msgstr ""

#: ../../contributor_guide.rst:143
msgid "``[Opt]``: IR optimization passes;"
msgstr ""

#: ../../contributor_guide.rst:144
msgid "``[Async]``: asynchronous execution engine;"
msgstr ""

#: ../../contributor_guide.rst:145
msgid "``[Type]``: type system;"
msgstr ""

#: ../../contributor_guide.rst:146
msgid "``[Infra]``: general infrastructure, e.g. logging, image reader;"
msgstr ""

#: ../../contributor_guide.rst:147
msgid "``[GUI]``: the built-in GUI system;"
msgstr ""

#: ../../contributor_guide.rst:148
msgid "``[Refactor]``: code refactoring;"
msgstr ""

#: ../../contributor_guide.rst:149
msgid "``[AutoDiff]``: automatic differentiation;"
msgstr ""

#: ../../contributor_guide.rst:150
msgid "``[CLI]``: commandline interfaces, e.g. the ``ti`` command;"
msgstr ""

#: ../../contributor_guide.rst:151
msgid "``[Doc]``: documentation under ``docs/``;"
msgstr ""

#: ../../contributor_guide.rst:152
msgid "``[Example]``: examples under ``examples/``;"
msgstr ""

#: ../../contributor_guide.rst:153
msgid "``[Test]``: adding or improving tests under ``tests/``;"
msgstr ""

#: ../../contributor_guide.rst:154
msgid "``[Benchmark]``: Benchmarking & regression tests;"
msgstr ""

#: ../../contributor_guide.rst:155
msgid "``[Linux]``: Linux platform;"
msgstr ""

#: ../../contributor_guide.rst:156
msgid "``[Mac]``: Mac OS X platform;"
msgstr ""

#: ../../contributor_guide.rst:157
msgid "``[Windows]``: Windows platform;"
msgstr ""

#: ../../contributor_guide.rst:158
msgid "``[PyPI]``: PyPI package release;"
msgstr ""

#: ../../contributor_guide.rst:159
msgid "``[Workflow]``: GitHub Actions/Workflows;"
msgstr ""

#: ../../contributor_guide.rst:160
msgid ""
"``[Misc]``: something that doesn't belong to any category, such as "
"version bump, reformatting;"
msgstr ""

#: ../../contributor_guide.rst:161
msgid "``[Bug]``: bug fixes;"
msgstr ""

#: ../../contributor_guide.rst:162
msgid ""
"**When introducing a new tag, please update the list here in the first PR"
" with that tag, so that people can follow.**"
msgstr ""

#: ../../contributor_guide.rst:166
msgid ""
"We do appreciate all kinds of contributions, yet we should not expose the"
" title of every PR to end-users. Therefore the changelog will distinguish"
" `what the user should know` from `what the developers are doing`. This "
"is done by **capitalizing PR tags**:"
msgstr ""

#: ../../contributor_guide.rst:170
msgid ""
"PRs with visible/notable features to the users should be marked with tags"
" starting with **the first letter capitalized**, e.g. ``[Metal], "
"[OpenGL], [IR], [Lang], [CLI]``. When releasing a new version, a script "
"will generate a changelog with these changes (PR title) highlighted. "
"Therefore it is **important** to make sure the end-users can understand "
"what your PR does, **based on your PR title**."
msgstr ""

#: ../../contributor_guide.rst:172
msgid ""
"Other PRs (underlying development/intermediate implementation) should use"
" tags with **everything in lowercase letters**: e.g. ``[metal], [opengl],"
" [ir], [lang], [cli]``."
msgstr ""

#: ../../contributor_guide.rst:175
msgid "Tips on the Taichi compiler development"
msgstr ""

#: ../../contributor_guide.rst:177
msgid ""
":ref:`compilation` may worth checking out. It explains the whole "
"compilation process."
msgstr ""

#: ../../contributor_guide.rst:179
msgid ""
":ref:`regress` may worth checking out when the work involves IR "
"optimization."
msgstr ""

#: ../../contributor_guide.rst:181
msgid ""
"When creating a Taichi program using ``ti.init(arch=desired_arch, "
"**kwargs)``, pass in the following parameters to make the Taichi compiler"
" print out IR:"
msgstr ""

#: ../../contributor_guide.rst:183
msgid ""
"``print_preprocessed = True``: print results of the frontend Python AST "
"transform. The resulting scripts will generate a Taichi Frontend AST when"
" executed."
msgstr ""

#: ../../contributor_guide.rst:184
msgid ""
"``print_ir = True``: print the Taichi IR transformation process of kernel"
" (excluding accessors) compilation."
msgstr ""

#: ../../contributor_guide.rst:185
msgid "``print_kernel_llvm_ir = True``: print the emitted LLVM IR by Taichi."
msgstr ""

#: ../../contributor_guide.rst:186
msgid ""
"``print_kernel_llvm_ir_optimized = True``: print the optimized LLVM IR "
"for each kernel."
msgstr ""

#: ../../contributor_guide.rst:187
msgid ""
"``print_accessor_ir = True``: print the IR transformation process of data"
" accessors, which are special and simple kernels. (This is rarely used, "
"unless you are debugging the compilation of data accessors.)"
msgstr ""

#: ../../contributor_guide.rst:191
msgid ""
"Data accessors in Python-scope are implemented as special Taichi kernels."
" For example, ``x[1, 2, 3] = 3`` will call the writing accessor kernel of"
" ``x``, and ``print(y[42])`` will call the reading accessor kernel of "
"``y``."
msgstr ""

#: ../../contributor_guide.rst:197
msgid "Testing"
msgstr ""

#: ../../contributor_guide.rst:199
msgid "Tests should be added to ``taichi/tests``."
msgstr ""

#: ../../contributor_guide.rst:201
msgid "Use ``ti test`` to run all the tests."
msgstr ""

#: ../../contributor_guide.rst:202
msgid "Use ``ti test -v`` for verbose outputs."
msgstr ""

#: ../../contributor_guide.rst:203
msgid ""
"Use ``ti test <filename(s)>`` to run specific tests. e.g. ``ti test "
"numpy_io`` and ``ti test test_numpy_io.py`` are equivalent."
msgstr ""

#: ../../contributor_guide.rst:204
msgid ""
"Use ``ti test -a <arch(s)>`` for test against specified architectures. "
"e.g. ``ti test -a opengl`` or ``ti test numpy_io -a cuda,metal``."
msgstr ""

#: ../../contributor_guide.rst:205
msgid ""
"Use ``ti test -na <arch(s)>`` for test all architectures exclude some of "
"them. e.g. ``ti test -na opengl,cuda``."
msgstr ""

#: ../../contributor_guide.rst:206
msgid "Use ``ti test -c`` to run only the C++ tests. e.g. ``ti test -c alg_simp``"
msgstr ""

#: ../../contributor_guide.rst:208
msgid "For more options, see ``ti test -h``."
msgstr ""

#: ../../contributor_guide.rst:211
msgid "Documentation"
msgstr "文档"

#: ../../contributor_guide.rst:213
msgid "Use ``ti doc`` to build the documentation locally."
msgstr ""

#: ../../contributor_guide.rst:214
msgid "Open the documentation at ``taichi/doc/build/index.html``."
msgstr ""

#: ../../contributor_guide.rst:215
msgid ""
"On Linux/OS X, use ``watch -n 1 ti doc`` to continuously build the "
"documentation."
msgstr ""

#: ../../contributor_guide.rst:217
msgid ""
"If the OpenGL backend detector keeps creating new windows, execute "
"``export TI_WITH_OPENGL=0`` for ``ti doc``."
msgstr ""

#: ../../contributor_guide.rst:220
msgid "C++ and Python standards"
msgstr ""

#: ../../contributor_guide.rst:222
msgid ""
"The C++ part of Taichi is written in C++17, and the Python part in 3.6+. "
"You can assume that C++17 and Python 3.6 features are always available."
msgstr ""

#: ../../contributor_guide.rst:227
msgid "Efficient code navigation across Python/C++"
msgstr ""

#: ../../contributor_guide.rst:228
msgid ""
"If you work on the language frontend (Python/C++ interface), to navigate "
"around the code base, `ffi-navigator <https://github.com/tqchen/ffi-"
"navigator>`_ allows you to jump from Python bindings to their definitions"
" in C++. Follow their README to set up your editor."
msgstr ""

#: ../../contributor_guide.rst:234
msgid "Folder structure"
msgstr ""

#: ../../contributor_guide.rst:236
msgid "Key folders are"
msgstr ""

#: ../../contributor_guide.rst:238
msgid "``taichi``: The core compiler implementation"
msgstr ""

#: ../../contributor_guide.rst:240
msgid "``analysis``: Static analysis passes"
msgstr ""

#: ../../contributor_guide.rst:241
msgid "``backends``: Device-dependent code generators/runtime environments"
msgstr ""

#: ../../contributor_guide.rst:242
msgid "``codegen``: Code generation base classes"
msgstr ""

#: ../../contributor_guide.rst:243
msgid "``gui``:  GUI"
msgstr ""

#: ../../contributor_guide.rst:244
msgid "``inc``:  Small definition files to be included repeatedly"
msgstr ""

#: ../../contributor_guide.rst:245
msgid "``ir``: Intermediate representation"
msgstr ""

#: ../../contributor_guide.rst:246
msgid "``jit``: JIT-in-time compilation base classes"
msgstr ""

#: ../../contributor_guide.rst:247
msgid "``llvm``: LLVM utils"
msgstr ""

#: ../../contributor_guide.rst:248
msgid "``math``: Math utils"
msgstr ""

#: ../../contributor_guide.rst:249
msgid "``platform``: Platform supports"
msgstr ""

#: ../../contributor_guide.rst:250
msgid "``program``: Top-level constructs"
msgstr ""

#: ../../contributor_guide.rst:251
msgid "``python``: C++/Python interfaces"
msgstr ""

#: ../../contributor_guide.rst:252
msgid "``runtime``: Runtime environments"
msgstr ""

#: ../../contributor_guide.rst:253
msgid "``struct``: Struct compiler base classes"
msgstr ""

#: ../../contributor_guide.rst:254
msgid "``system``: OS-related infrastructure"
msgstr ""

#: ../../contributor_guide.rst:255
msgid "``transforms``: IR transform passes"
msgstr ""

#: ../../contributor_guide.rst:256
msgid "``util``:  Miscellaneous utilities"
msgstr ""

#: ../../contributor_guide.rst:258
msgid "``python``: Python frontend implementation"
msgstr ""

#: ../../contributor_guide.rst:259
msgid "``examples``: Examples"
msgstr ""

#: ../../contributor_guide.rst:260
msgid "``docs``: Documentation"
msgstr ""

#: ../../contributor_guide.rst:261
msgid "``tests``: C++ and Python tests"
msgstr ""

#: ../../contributor_guide.rst:262
msgid "``benchmarks``: Performance benchmarks"
msgstr ""

#: ../../contributor_guide.rst:263
msgid "``misc``: Random (yet useful) files"
msgstr ""

#: ../../contributor_guide.rst:264
msgid "..."
msgstr ""

#: ../../contributor_guide.rst:267
msgid "Upgrading CUDA"
msgstr ""

#: ../../contributor_guide.rst:269
msgid ""
"Right now we are targeting CUDA 10. When upgrading CUDA version, the file"
" ``external/cuda_libdevice/slim_libdevice.10.bc`` should also be replaced"
" with a newer version."
msgstr ""

#: ../../contributor_guide.rst:272
msgid ""
"To generate the slimmed version of libdevice based on a full "
"``libdevice.X.bc`` file from a CUDA installation, use ``ti run "
"make_slim_libdevice [libdevice.X.bc file]``"
msgstr ""

#~ msgid "New features"
#~ msgstr "新特性"

#~ msgid ""
#~ "If you want early feedback from "
#~ "core developers, open a PR in "
#~ "**Draft** state on GitHub so that "
#~ "you can share your progress."
#~ msgstr "如果你希望早点得到维护人员的反馈，请在 GitHub 上开启一个处于 **Draft** （草稿）状态的 PR，从而与人们分享你的进度。"

#~ msgid ""
#~ "All PRs should always be **rebased** "
#~ "onto the latest master branch before "
#~ "merging;"
#~ msgstr ""

#~ msgid ""
#~ "All PRs should pass **continuous "
#~ "integration tests** before they get "
#~ "merged;"
#~ msgstr ""

#~ msgid "CI will be triggered everytime you push commits to an open PR."
#~ msgstr ""

#~ msgid "PR title tags"
#~ msgstr ""

#~ msgid ""
#~ "Please always prepend exactly one tag"
#~ " such as ``[Metal]`` to PR titles."
#~ " For example, \"[Metal] Support bitmasked"
#~ " SNode\", \"[OpenGL] AtomicMin/Max support\", "
#~ "or \"[Opt] Enhanced constant folding\"."
#~ msgstr ""

#~ msgid "``[Std]``: standard library, e.g. `ti.Matrix` and `ti.Vector`;"
#~ msgstr ""

#~ msgid "``[Doc]``: documentation;"
#~ msgstr ""

#~ msgid "``[Example]``: examples under ``taichi/examples/``;"
#~ msgstr ""

#~ msgid ""
#~ ":ref:`regression` may worth checking out "
#~ "when the work involves IR optimization."
#~ msgstr ""

#~ msgid ""
#~ "Tests should be added to "
#~ "``taichi/tests``. Use ``ti test`` to run"
#~ " all the tests. Use ``ti test "
#~ "-v`` for verbose outputs. Use ``ti "
#~ "test <filename(s)>`` to run specific "
#~ "tests. e.g. ``ti test numpy_io`` and "
#~ "``ti test test_numpy_io.py`` are equivalent."
#~ " Use ``ti test -a <arch(s)>`` for "
#~ "test against specified architectures. e.g. "
#~ "``ti test -a opengl`` or ``ti test"
#~ " numpy_io -a cuda,metal``. Use ``ti "
#~ "test -na <arch(s)>`` for test all "
#~ "architectures exclude some of them. e.g."
#~ " ``ti test -na opengl,cuda``. Use "
#~ "``ti test -c`` to run only the "
#~ "C++ tests. e.g. ``ti test -c "
#~ "alg_simp``"
#~ msgstr ""

#~ msgid ""
#~ "Use ``ti doc`` to build the "
#~ "documentation locally. Open the documentation"
#~ " at ``taichi/doc/build/index.html``. On Linux/OS"
#~ " X, use ``watch -n 1 ti doc``"
#~ " to continuously build the documentation."
#~ msgstr ""

#~ msgid "(Linux only) pinpointing runtime errors using ``gdb``"
#~ msgstr ""

#~ msgid ""
#~ "A quick way to pinpoint common "
#~ "runtime errors such as segmentation "
#~ "faults/assertion failures. When Taichi "
#~ "crashes, ``gdb`` will be triggered and"
#~ " attach to the current thread. You"
#~ " might be prompt to enter sudo "
#~ "password required for gdb thread "
#~ "attaching. After entering ``gdb``, check "
#~ "the stack backtrace with command ``bt``"
#~ " (``backtrace``), then find the line "
#~ "of code triggering the error."
#~ msgstr ""

#~ msgid "``codegen``: Code generators"
#~ msgstr ""

#~ msgid "``struct``: Struct compilers"
#~ msgstr ""

