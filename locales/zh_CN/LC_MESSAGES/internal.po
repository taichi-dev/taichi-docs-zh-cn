# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-13 20:53-0400\n"
"PO-Revision-Date: 2020-05-13 22:01-0400\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_CN\n"
"X-Generator: Poedit 2.3.1\n"

#: ../../internal.rst:2
msgid "Internal designs (WIP)"
msgstr "内部设计（WIP）"

#: ../../internal.rst:6
msgid "Intermediate representation"
msgstr "中间表示（Intermediate representation）"

#: ../../internal.rst:7
msgid "Use ``ti.init(print_ir=True)`` to print IR on the console."
msgstr "使用 ``ti.init(print_ir=True)`` 来将中间表示代码输出到控制台。"

#: ../../internal.rst:11
msgid "Code generation"
msgstr "代码生成"

#: ../../internal.rst:15
msgid "Statistics"
msgstr "统计量"

#: ../../internal.rst:17
msgid ""
"In some cases, it is helpful to gather certain quantitative information "
"about internal events during Taichi program execution. The "
"``Statistics`` class is designed for this purpose."
msgstr ""
"在某些情况下，在Taichi程序的执行过程中，收集关于内部事件的特定的量化信息"
"是很用帮助的。``Statistics`` 类就是为此设计的。"

#: ../../internal.rst:20
msgid "Usage:"
msgstr "用法："

#: ../../internal.rst:22
msgid ""
"#include \"taichi/util/statistics.h\"\n"
"\n"
"// add 1.0 to counter \"codegen_offloaded_tasks\"\n"
"taichi::stat.add(\"codegen_offloaded_tasks\");\n"
"\n"
"// add the number of statements in \"ir\" to counter \"codegen_statements"
"\"\n"
"taichi::stat.add(\"codegen_statements\", irpass::analysis::"
"count_statements(this->ir));"
msgstr ""
"#include “taichi/util/statistics.h”\n"
"\n"
"将1.0加到计数器“codegenoffloaded_tasks”上\n"
"taichi::stat.add(“codegen_offloaded_tasks”);\n"
"\n"
"// 将“中间表示”中语句的数量加到计数器“codegen_statements”上\n"
"taichi::stat.add(“codegen_statements”, irpass::analysis::"
"count_statements(this->ir));"

#: ../../internal.rst:33
msgid "Note the keys are ``std::string`` and values are ``double``."
msgstr "注意键为 ``std::string`` 而值类型为 ``double``。"

#: ../../internal.rst:35
msgid "To print out all statistics in Python:"
msgstr "在Python中使用如下方式来打印出所有的统计量："

#: ../../internal.rst:37
msgid "ti.core.print_stat()"
msgstr ""

#: ../../internal.rst:43
msgid "Why Python frontend"
msgstr "为什么使用Python作为前端语言"

#: ../../internal.rst:45
msgid "Embedding Taichi in ``python`` has the following advantages:"
msgstr "将Taichi嵌入到 ``Python`` 中有以下优点："

#: ../../internal.rst:47
msgid "Easy to learn. Taichi has a very similar syntax to Python."
msgstr "易于学习。Taichi的语法与Python非常相似。"

#: ../../internal.rst:48
msgid "Easy to run. No ahead-of-time compilation is needed."
msgstr "易于运行。不需要运行前编译（ahead-of-time compilation）。"

#: ../../internal.rst:49
msgid "This design allows people to reuse existing python infrastructure:"
msgstr "这样的设计使用户可以重复利用已有的Python基础架构："

#: ../../internal.rst:51
msgid ""
"IDEs. A python IDE mostly works for Taichi with syntax highlighting, "
"syntax checking, and autocomplete."
msgstr ""
"集成开发环境（IDEs）。大部分Python的集成开发环境提供的语法高亮，语法检查"
"和自动补全功能可以用于Taichi。"

#: ../../internal.rst:52
msgid ""
"Package manager (pip). A developed Taichi application and be easily "
"submitted to ``PyPI`` and others can easily set it up with ``pip``."
msgstr ""
"包管理器（pip）。开发好的Taichi程序可以被简单地提交至 ``PyPI`` 并且其他用"
"户可以轻松地使用 ``pip`` 安装它。"

#: ../../internal.rst:53
msgid ""
"Existing packages. Interacting with other python components (e.g. "
"``matplotlib`` and ``numpy``) is just trivial."
msgstr ""
"现有的包。用户可以很轻松地与其他Python组件（例如 ``matplotlib`` 和 "
"``numpy``）交互。"

#: ../../internal.rst:55
msgid ""
"The built-in AST manipulation tools in ``python`` allow us to do magical "
"things, as long as the kernel body can be parsed by the Python parser."
msgstr ""
"只要内核主体可以被Python的解析器解析，那么 ``Python`` 内置的处理抽象语法"
"树（AST）的工具让我们可以做一些奇妙的事情。"

#: ../../internal.rst:57
msgid "However, this design has drawbacks as well:"
msgstr "但是，这样的设计同样存在一些不足之处："

#: ../../internal.rst:59
msgid ""
"Taichi kernels must parse-able by Python parsers. This means Taichi "
"syntax cannot go beyond Python syntax."
msgstr ""
"Taichi内核必须能被Python解析器解析。这意味着Taichi的语法不能超出Python的"
"语法范畴。"

#: ../../internal.rst:61
msgid ""
"For example, indexing is always needed when accessing elements in Taichi "
"tensors, even if the tensor is 0D. Use ``x[None] = 123`` to set the "
"value in ``x`` if ``x`` is 0D. This is because ``x = 123`` will set "
"``x`` itself (instead of its containing value) to be the constant "
"``123`` in python syntax, and, unfortunately, we cannot modify this "
"behavior."
msgstr ""
"例如，访问Taichi张量时，即使张量是0维度的也必须使用索引。如果 ``x`` 是0维"
"的，需要使用 ``x[None] = 123`` 来给 ``x`` 中的量赋值。这是因为在Python语"
"法中， ``x = 123`` 将会将 ``x`` 本身（而不是它包含的值）设为常数 "
"``123`` ，不幸的是，我们无法更改这种行为。"

#: ../../internal.rst:63
msgid ""
"Python has relatively low performance. This can cause a performance "
"issue when initializing large Taichi tensors with pure python scripts. A "
"Taichi kernel should be used to initialize a huge tensor."
msgstr ""
"Python的性能相对较为低下。这在使用纯Python脚本初始化较大Taichi张量时会导"
"致一些性能问题。初始化较大张量时必须使用Taichi内核。"
