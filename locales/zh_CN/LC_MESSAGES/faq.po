# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-20 10:00+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../faq.rst:2
msgid "Frequently asked questions"
msgstr ""

#: ../../faq.rst:4
msgid ""
"**Q:** Can a user iterate over irregular topologies (e.g., graphs or "
"tetrahedral meshes) instead of regular grids?"
msgstr ""

#: ../../faq.rst:6
msgid ""
"**A:** These structures have to be represented using 1D arrays in Taichi."
" You can still iterate over them using ``for i in x`` or ``for i in "
"range(n)``. However, at compile time, there's little the Taichi compiler "
"can do for you to optimize it. You can still tweak the data layout to get"
" different runtime cache behaviors and performance numbers."
msgstr ""

#~ msgid "Frequently Asked Questions"
#~ msgstr ""

#~ msgid ""
#~ "**Can a user iterate over irregular "
#~ "topology instead of grids, such as "
#~ "tetrahedra meshes, line segment vertices?**"
#~ " These structures have to be "
#~ "represented using 1D arrays in Taichi."
#~ " You can still iterate over it "
#~ "using `for i in x` or `for i"
#~ " in range(n)`. However, at compile "
#~ "time, there's little the Taichi compiler"
#~ " can do for you to optimize it."
#~ " You can still tweak the data "
#~ "layout to get different run time "
#~ "cache behaviors and performance numbers."
#~ msgstr ""

#~ msgid ""
#~ "**Can potential energies be differentiated "
#~ "automatically to get forces?** Yes. "
#~ "Taichi supports automatic differentiation. We"
#~ " do have an `example <https://github.com"
#~ "/yuanming-"
#~ "hu/taichi/blob/master/examples/mpm_lagrangian_forces.py>`_ for"
#~ " this."
#~ msgstr ""

#~ msgid ""
#~ "**Does the compiler backend support the"
#~ " same quality of optimizations for "
#~ "the GPU and CPU? For instance, if"
#~ " I switch to using the CUDA "
#~ "backend, do I lose the cool "
#~ "hash-table optimizations?** Mostly. The "
#~ "CPU/GPU compilation workflow are basically "
#~ "the same, except for vectorization on"
#~ " SIMD CPUs. You still have the "
#~ "hash table optimization on GPUs."
#~ msgstr ""

