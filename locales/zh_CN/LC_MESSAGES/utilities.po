# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-13 20:53-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_CN\n"
"X-Generator: Poedit 2.3.1\n"

#: ../../utilities.rst:2
msgid "Utilities"
msgstr "实用工具"

#: ../../utilities.rst:5
msgid "Logging"
msgstr "日志"

#: ../../utilities.rst:7
msgid ""
"'''\n"
"level can be {}\n"
"    ti.TRACE\n"
"    ti.DEBUG\n"
"    ti.INFO\n"
"    ti.WARN\n"
"    ti.ERR\n"
"    ti.CRITICAL\n"
"'''\n"
"ti.set_logging_level(level)"
msgstr ""
"'''\n"
"level can be {}\n"
"    ti.TRACE\n"
"    ti.DEBUG\n"
"    ti.INFO\n"
"    ti.WARN\n"
"    ti.ERR\n"
"    ti.CRITICAL\n"
"'''\n"
"ti.set_logging_level(level)"

#: ../../utilities.rst:20
msgid ""
"The default logging level is ``ti.INFO``. You can also override default "
"logging level by setting the environment variable like "
"``TI_LOG_LEVEL=warn``."
msgstr ""
"默认日志记录级别为 ``ti.INFO``。 你还可以通过将环境变量 "
"``TI_LOG_LEVEL`` 设置为诸如 ``trace`` 和 ``warn`` 之类的值来覆盖默认日志"
"记录级别。"

#: ../../utilities.rst:27
msgid "Benchmarking and Regression Tests"
msgstr ""

#: ../../utilities.rst:29
msgid ""
"Run ``ti benchmark`` to run tests in benchmark mode. This will record the"
" performance of ``ti test``, and save it in ``benchmarks/output``."
msgstr ""

#: ../../utilities.rst:31
msgid ""
"Run ``ti regression`` to show the difference between previous result in "
"``benchmarks/baseline``. And you can see if the performance is increasing"
" or decreasing after your commits. This is really helpful when your work "
"is related to IR optimizations."
msgstr ""

#: ../../utilities.rst:33
msgid ""
"Run ``ti baseline`` to save the benchmark result to "
"``benchmarks/baseline`` for furture comparsion, this may be executed on "
"performance related PRs, before they are merged into master."
msgstr ""

#: ../../utilities.rst:35
msgid ""
"For example, this is part of the output by ``ti regression`` after "
"enabling constant folding optimization pass:"
msgstr ""

#: ../../utilities.rst:37
msgid ""
"linalg__________________polar_decomp______________________________\n"
"codegen_offloaded_tasks                       37 ->    39    +5.4%\n"
"codegen_statements                          3179 ->  3162    -0.5%\n"
"codegen_kernel_statements                   2819 ->  2788    -1.1%\n"
"codegen_evaluator_statements                   0 ->    14    +inf%\n"
"\n"
"linalg__________________init_matrix_from_vectors__________________\n"
"codegen_offloaded_tasks                       37 ->    39    +5.4%\n"
"codegen_statements                          3180 ->  3163    -0.5%\n"
"codegen_kernel_statements                   2820 ->  2789    -1.1%\n"
"codegen_evaluator_statements                   0 ->    14    +inf%"
msgstr ""

#: ../../utilities.rst:53
msgid ""
"Currently ``ti benchmark`` only support benchmarking number-of-"
"statements, no time benchmarking is included since it depends on hardware"
" performance and therefore hard to compare if the baseline is from "
"another machine. We are to purchase a fixed-performance machine as a time"
" benchmark server at some point. Discussion at: https://github.com"
"/taichi-dev/taichi/issue/948"
msgstr ""

#: ../../utilities.rst:58
msgid ""
"The suggested workflow for **the PR author** to run the regression tests "
"is:"
msgstr ""

#: ../../utilities.rst:60
msgid "When a performance related PR is ready, checkout that PR locally."
msgstr ""

#: ../../utilities.rst:62
msgid "Run ``ti benchmark && ti regression`` to obtain the result."
msgstr ""

#: ../../utilities.rst:64
msgid "Decide wheater to approve or request change, depends on the result."
msgstr ""

#: ../../utilities.rst:66 ../../utilities.rst:77
msgid ""
"Right before merge, run ``ti baseline`` to save the benchmark result as "
"new baseline."
msgstr ""

#: ../../utilities.rst:69
msgid ""
"**Reviewers** can also ask the PR author to run and upload the test "
"result, if they consider the PR performance sensitive. If the reviewers "
"would like to run the regression tests themselves, the suggested workflow"
" is:"
msgstr ""

#: ../../utilities.rst:71
msgid ""
"When a stage of work is done, run ``ti benchmark && ti regression`` to "
"obtain result."
msgstr ""

#: ../../utilities.rst:73
msgid ""
"When ready for review, post the latest result in PR comments, wait for "
"the reviewer."
msgstr ""

#: ../../utilities.rst:75
msgid "Get feedback from the reviewer, and improve the result."
msgstr ""

#: ../../utilities.rst:81
msgid "Trigger GDB when the program crashes"
msgstr "程序崩溃时触发GDB"

#: ../../utilities.rst:83
msgid ""
"# Python\n"
"ti.set_gdb_trigger(True)\n"
"\n"
"// C++\n"
"CoreState::set_trigger_gdb_when_crash(true);\n"
"\n"
"# Shell\n"
"export TI_GDB_TRIGGER=1"
msgstr ""
"# Python\n"
"ti.set_gdb_trigger(True)\n"
"\n"
"// C++\n"
"CoreState::set_trigger_gdb_when_crash(true);"

#: ../../utilities.rst:95
msgid "Interface System"
msgstr "接口系统"

#: ../../utilities.rst:96
msgid "Print all interfaces and units"
msgstr "打印所有接口和单位"

#: ../../utilities.rst:98
msgid "ti.core.print_all_units()"
msgstr "ti.core.print_all_units()"

#: ../../utilities.rst:103
msgid "Serialization"
msgstr "序列化"

#: ../../utilities.rst:105
msgid ""
"The serialization module of taichi allows you to serialize/deserialize "
"objects into/from binary strings."
msgstr "taichi的序列化模块可以允许你将对象序列化/反序列化成二进制字符串。"

#: ../../utilities.rst:107
msgid ""
"You can use ``TI_IO`` macros to explicit define fields necessary in "
"Taichi."
msgstr "你可以使用 ``TI_IO`` 宏来显式定义太极拳中必要的字段。"

#: ../../utilities.rst:109
msgid ""
"// TI_IO_DEF\n"
"struct Particle {\n"
"    Vector3f position, velocity;\n"
"    real mass;\n"
"    string name;\n"
"\n"
"    TI_IO_DEF(position, velocity, mass, name);\n"
"}\n"
"\n"
"// TI_IO_DECL\n"
"struct Particle {\n"
"    Vector3f position, velocity;\n"
"    real mass;\n"
"    bool has_name\n"
"    string name;\n"
"\n"
"    TI_IO_DECL() {\n"
"        TI_IO(position);\n"
"        TI_IO(velocity);\n"
"        TI_IO(mass);\n"
"        TI_IO(has_name);\n"
"        // More flexibility:\n"
"        if (has_name) {\n"
"            TI_IO(name);\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"// TI_IO_DEF_VIRT();"
msgstr ""
"// TI_IO_DEF\n"
"struct Particle {\n"
"    Vector3f position, velocity;\n"
"    real mass;\n"
"    string name;\n"
"\n"
"    TI_IO_DEF(position, velocity, mass, name);\n"
"}\n"
"\n"
"// TI_IO_DECL\n"
"struct Particle {\n"
"    Vector3f position, velocity;\n"
"    real mass;\n"
"    bool has_name\n"
"    string name;\n"
"\n"
"    TI_IO_DECL() {\n"
"        TI_IO(position);\n"
"        TI_IO(velocity);\n"
"        TI_IO(mass);\n"
"        TI_IO(has_name);\n"
"        // More flexibility:\n"
"        if (has_name) {\n"
"            TI_IO(name);\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"// TI_IO_DEF_VIRT();"

#: ../../utilities.rst:143
msgid "Progress Notification"
msgstr "进展通知"

#: ../../utilities.rst:145
msgid ""
"The taichi messager can send an email to ``$TI_MONITOR_EMAIL`` when the "
"task finished or crashed. To enable:"
msgstr ""
"当任务完成或崩溃时，taichi消息传递程序可以将邮件发送到 ``"
"$TI_MONITOR_EMAIL`` 。 要启用的话："

#: ../../utilities.rst:148
msgid ""
"from taichi.tools import messager\n"
"messager.enable(task_id='test')"
msgstr ""
"from taichi.tools import messager\n"
"messager.enable(task_id='test')"

#~ msgid "TODO: update"
#~ msgstr ""

#~ msgid "GUI system"
#~ msgstr ""

#~ msgid ""
#~ "gui = ti.GUI('Title', (640, 480))\n"
#~ "while not gui.is_pressed(ti.GUI.ESCAPE):\n"
#~ "    gui.set_image(img)\n"
#~ "    gui.show()"
#~ msgstr ""

#~ msgid ""
#~ "Also checkout ``examples/keyboard.py`` for "
#~ "more advanced event processing."
#~ msgstr ""

#~ msgid "Image I/O"
#~ msgstr ""

#~ msgid ""
#~ "img = ti.imread('hello.png')\n"
#~ "ti.imshow(img, 'Window Title')\n"
#~ "ti.imwrite(img, 'hello2.png')"
#~ msgstr ""

#~ msgid ""
#~ "The default logging level is "
#~ "``ti.INFO``. You can also override "
#~ "default logging level by setting the "
#~ "environment variable ``TI_LOG_LEVEL`` to "
#~ "values such as ``trace`` and ``warn``."
#~ msgstr ""

#~ msgid ""
#~ "# Python\n"
#~ "ti.set_gdb_trigger(True)\n"
#~ "\n"
#~ "// C++\n"
#~ "CoreState::set_trigger_gdb_when_crash(true);"
#~ msgstr ""
