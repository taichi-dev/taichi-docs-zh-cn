# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-13 20:53-0400\n"
"PO-Revision-Date: 2020-05-11 00:01-0400\n"
"Last-Translator: \n"
"Language: zh_CN\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../external.rst:4
msgid "Interacting with external arrays"
msgstr "与外部数组进行交互"

#: ../../external.rst:6
#, fuzzy
msgid "**External arrays** refer to ``numpy.ndarray`` or ``torch.Tensor``."
msgstr "此处 ``外部数组（external arrays）`` 是指 ``numpy.ndarray`` 或 ``torch.Tensor``。"

#: ../../external.rst:9
msgid "Conversion between Taichi tensors and external arrays"
msgstr "Taichi张量与外部数组之间的转换"

#: ../../external.rst:11
msgid "Use ``to_numpy``/``from_numpy``/``to_torch``/``from_torch``:"
msgstr "使用 ``to_numpy``/``from_numpy``/``to_torch``/``from_torch``："

#: ../../external.rst:13
msgid ""
"n = 4\n"
"m = 7\n"
"\n"
"# Taichi tensors\n"
"val = ti.var(ti.i32, shape=(n, m))\n"
"vec = ti.Vector(3, dt=ti.i32, shape=(n, m))\n"
"mat = ti.Matrix(3, 4, dt=ti.i32, shape=(n, m))\n"
"\n"
"# Scalar\n"
"arr = np.ones(shape=(n, m), dtype=np.int32)\n"
"\n"
"val.from_numpy(arr)\n"
"\n"
"arr = val.to_numpy()\n"
"\n"
"# Vector\n"
"arr = np.ones(shape=(n, m, 3), dtype=np.int32)\n"
"\n"
"vec.from_numpy(arr)\n"
"\n"
"arr = np.ones(shape=(n, m, 3, 1), dtype=np.int32)\n"
"vec.from_numpy(arr)\n"
"\n"
"arr = vec.to_numpy()\n"
"assert arr.shape == (n, m, 3, 1)\n"
"\n"
"arr = vec.to_numpy(as_vector=True)\n"
"assert arr.shape == (n, m, 3)\n"
"\n"
"# Matrix\n"
"arr = np.ones(shape=(n, m, 3, 4), dtype=np.int32)\n"
"\n"
"mat.from_numpy(arr)\n"
"\n"
"arr = mat.to_numpy()\n"
"assert arr.shape == (n, m, 3, 4)"
msgstr ""
"n = 4\n"
"m = 7\n"
"\n"
"# Taichi 张量\n"
"val = ti.var(ti.i32, shape=(n, m))\n"
"vec = ti.Vector(3, dt=ti.i32, shape=(n, m))\n"
"mat = ti.Matrix(3, 4, dt=ti.i32, shape=(n, m))\n"
"\n"
"# 标量\n"
"arr = np.ones(shape=(n, m), dtype=np.int32)\n"
"\n"
"val.from_numpy(arr)\n"
"\n"
"arr = val.to_numpy()\n"
"\n"
"# 向量\n"
"arr = np.ones(shape=(n, m, 3), dtype=np.int32)\n"
"\n"
"vec.from_numpy(arr)\n"
"\n"
"arr = np.ones(shape=(n, m, 3, 1), dtype=np.int32)\n"
"vec.from_numpy(arr)\n"
"\n"
"arr = vec.to_numpy()\n"
"assert arr.shape == (n, m, 3, 1)\n"
"\n"
"arr = vec.to_numpy(as_vector=True)\n"
"assert arr.shape == (n, m, 3)\n"
"\n"
"# 矩阵\n"
"arr = np.ones(shape=(n, m, 3, 4), dtype=np.int32)\n"
"\n"
"mat.from_numpy(arr)\n"
"\n"
"arr = mat.to_numpy()\n"
"assert arr.shape == (n, m, 3, 4)"

#: ../../external.rst:54
#, fuzzy
msgid "Using external arrays as Taichi kernel parameters"
msgstr "使用外部数组作为Taichi内核的参数"

#: ../../external.rst:56
msgid ""
"The type hint for external array parameters is ``ti.ext_arr()``. Please "
"see the example below. Note that struct-for's on external arrays are not "
"supported."
msgstr "外部数组参数的类型提示是 ``ti.ext_arr()``。请参阅下面的示例。请注意，结构for循环不支持外部数组。"

#: ../../external.rst:59
msgid ""
"n = 4\n"
"m = 7\n"
"\n"
"val = ti.var(ti.i32, shape=(n, m))\n"
"\n"
"@ti.kernel\n"
"def test_numpy(arr: ti.ext_arr()):\n"
"  for i in range(n):\n"
"    for j in range(m):\n"
"      arr[i, j] += i + j\n"
"\n"
"a = np.empty(shape=(n, m), dtype=np.int32)\n"
"\n"
"for i in range(n):\n"
"  for j in range(m):\n"
"    a[i, j] = i * j\n"
"\n"
"test_numpy(a)\n"
"\n"
"for i in range(n):\n"
"  for j in range(m):\n"
"    assert a[i, j] == i * j + i + j"
msgstr ""

