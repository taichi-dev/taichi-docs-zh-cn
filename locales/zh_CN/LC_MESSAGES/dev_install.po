# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-20 10:00+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../dev_install.rst:4
msgid "Developer installation"
msgstr ""

#: ../../dev_install.rst:6
msgid ""
"Note this is for the compiler developers of the Taichi programming "
"language. End users should use the pip packages instead of building from "
"scratch. To build with NVIDIA GPU support, CUDA 10.0+ is needed. This "
"installation guide works for Ubuntu 16.04+ and OS X 10.14+. For precise "
"build instructions on Windows, please check out `appveyor.yml "
"<https://github.com/taichi-dev/taichi/blob/master/appveyor.yml>`_, which "
"does basically the same thing as the following instructions."
msgstr ""

#: ../../dev_install.rst:12
msgid ""
"Note that on Linux/OS X, ``clang`` is the only supported compiler for "
"compiling the Taichi compiler. On Windows only MSVC supported."
msgstr ""

#: ../../dev_install.rst:15
msgid "Installing Depedencies"
msgstr ""

#: ../../dev_install.rst:17
msgid "Make sure you are using Python 3.6/3.7/3.8"
msgstr ""

#: ../../dev_install.rst:18
msgid "Execute"
msgstr ""

#: ../../dev_install.rst:20
msgid ""
"python3 -m pip install --user setuptools astpretty astor pytest opencv-"
"python pybind11\n"
"python3 -m pip install --user Pillow numpy scipy GitPython yapf colorama "
"psutil autograd"
msgstr ""

#: ../../dev_install.rst:25
msgid ""
"(If on Ubuntu) Execute ``sudo apt install libtinfo-dev clang-8``. "
"(``clang-7`` should work as well)."
msgstr ""

#: ../../dev_install.rst:27
msgid "(If on other Linux distributions) Please build clang 8.0.1 from scratch:"
msgstr ""

#: ../../dev_install.rst:29
msgid ""
"wget https://github.com/llvm/llvm-"
"project/releases/download/llvmorg-8.0.1/cfe-8.0.1.src.tar.xz\n"
"tar xvJf cfe-8.0.1.src.tar.xz\n"
"cd cfe-8.0.1.src\n"
"mkdir build\n"
"cd build\n"
"cmake ..\n"
"make -j 8\n"
"sudo make install"
msgstr ""

#: ../../dev_install.rst:41
msgid "Make sure you have LLVM 8.0.1 built from scratch. To do so:"
msgstr ""

#: ../../dev_install.rst:43
msgid ""
"wget https://github.com/llvm/llvm-"
"project/releases/download/llvmorg-8.0.1/llvm-8.0.1.src.tar.xz\n"
"tar xvJf llvm-8.0.1.src.tar.xz\n"
"cd llvm-8.0.1.src\n"
"mkdir build\n"
"cd build\n"
"cmake .. -DLLVM_ENABLE_RTTI:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=OFF "
"-DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=\"X86;NVPTX\" "
"-DLLVM_ENABLE_ASSERTIONS=ON\n"
"# If you are building on NVIDIA Jetson TX2, use "
"-DLLVM_TARGETS_TO_BUILD=\"ARM;NVPTX\"\n"
"make -j 8\n"
"sudo make install"
msgstr ""

#: ../../dev_install.rst:56
msgid "Setting up CUDA (optional)"
msgstr ""

#: ../../dev_install.rst:58
msgid ""
"If you don't have CUDA, go to `this website <https://developer.nvidia.com"
"/cuda-downloads>`_ and download the installer."
msgstr ""

#: ../../dev_install.rst:60
msgid ""
"To check if CUDA is installed, run ``nvcc --version`` or ``cat "
"/usr/local/cuda/version.txt``."
msgstr ""

#: ../../dev_install.rst:61
msgid "On **Ubuntu** we recommend choosing ``deb (local)`` as **Installer Type**."
msgstr ""

#: ../../dev_install.rst:62
msgid ""
"On **Arch Linux**, you can easily install CUDA via ``pacman -S cuda`` "
"without downloading the installer manually."
msgstr ""

#: ../../dev_install.rst:66
msgid "Setting up Taichi for development"
msgstr ""

#: ../../dev_install.rst:68
msgid "Clone the taichi repo **recursively**, and build:"
msgstr ""

#: ../../dev_install.rst:70
msgid ""
"git clone https://github.com/taichi-dev/taichi --depth=1 --branch=master\n"
"git submodule update --init --recursive --depth=1\n"
"cd taichi\n"
"mkdir build\n"
"cd build\n"
"cmake ..\n"
"# if you are building with CUDA 10.0, use the line below:\n"
"#   cmake .. -DCUDA_VERSION=10.0 -DTI_WITH_CUDA:BOOL=True\n"
"make -j 8"
msgstr ""

#: ../../dev_install.rst:82
msgid "Add the following script to your ``~/.bashrc``:"
msgstr ""

#: ../../dev_install.rst:84
msgid ""
"export TAICHI_REPO_DIR=/home/XXX/taichi  # Path to your taichi repository"
"\n"
"export PYTHONPATH=$TAICHI_REPO_DIR/python/:$PYTHONPATH\n"
"export PATH=$TAICHI_REPO_DIR/bin/:$PATH\n"
"# export PATH=/opt/llvm/bin:$PATH # Uncomment if your llvm-8 or clang-8 "
"is in /opt"
msgstr ""

#: ../../dev_install.rst:91
msgid "Execute ``source ~/.bashrc`` to reload shell config."
msgstr ""

#: ../../dev_install.rst:92
msgid ""
"Execute ``python3 -m taichi test`` to run all the tests. It may take up "
"to 5 minutes to run all tests."
msgstr ""

#: ../../dev_install.rst:93
msgid "Check out ``examples`` for runnable examples. Run them with ``python3``."
msgstr ""

#: ../../dev_install.rst:98
msgid "Prebuilt LLVM for Windows CI"
msgstr ""

#: ../../dev_install.rst:100
msgid ""
"cmake .. -G\"Visual Studio 15 2017 Win64\"  -DLLVM_ENABLE_RTTI:BOOL=ON "
"-DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_BUILD_TYPE=Release "
"-DLLVM_TARGETS_TO_BUILD=\"X86;NVPTX\" -DLLVM_ENABLE_ASSERTIONS=ON "
"-Thost=x64 -DLLVM_BUILD_TESTS:BOOL=OFF -DCMAKE_INSTALL_PREFIX=installed"
msgstr ""

#: ../../dev_install.rst:104
msgid ""
"Then use Visual Studio to build. After building the ``INSTALL`` project "
"(under folder \"CMakePredefinedTargets\"). After build completes, find "
"your LLVM binaries/headers in `build/include`."
msgstr ""

#: ../../dev_install.rst:107
msgid "Troubleshooting"
msgstr ""

#: ../../dev_install.rst:109
msgid "Run with debug mode to see if there's any illegal memory access"
msgstr ""

#: ../../dev_install.rst:110
msgid ""
"Disable compiler optimizations to quickly confirm that the issue is not "
"cause by optimization"
msgstr ""

#~ msgid ""
#~ "(If on Ubuntu) Execute ``sudo apt "
#~ "install libtinfo-dev clang-8`` (or "
#~ "``clang-7`` should work as well)."
#~ msgstr ""

#~ msgid "(If on Arch Linux) Execute"
#~ msgstr ""

#~ msgid ""
#~ "wget "
#~ "https://archive.archlinux.org/packages/c/clang/clang-8.0.1-1-x86_64.pkg.tar.xz"
#~ "\n"
#~ "sudo pacman -Qp clang-8.0.1-1-x86_64.pkg.tar.xz"
#~ msgstr ""

#~ msgid ""
#~ "If you have installed ``clang`` (9.0.1)"
#~ " before, this command will overrides "
#~ "the existing ``clang``. If you don't "
#~ "want to break up depedencies, please "
#~ "build from scratch and install it "
#~ "in ``/opt``. Then add ``/opt/clang/bin`` "
#~ "to your ``$PATH``."
#~ msgstr ""

#~ msgid "Clone the taichi repo, and build:"
#~ msgstr ""

#~ msgid ""
#~ "git clone https://github.com/taichi-dev/taichi "
#~ "--depth=1 --branch=master\n"
#~ "git submodule update --init --recursive --depth=1\n"
#~ "cd taichi\n"
#~ "mkdir build\n"
#~ "cd build\n"
#~ "cmake ..\n"
#~ "# if you are building with CUDA 10.0, use the line below:\n"
#~ "# cmake .. -DCUDA_VERSION=10.0 -DTI_WITH_CUDA:BOOL=True\n"
#~ "make -j 8"
#~ msgstr ""

#~ msgid "Setting up CUDA 10.1 on Ubuntu 18.04"
#~ msgstr ""

#~ msgid ""
#~ "First, make sure you have CUDA "
#~ "10.1 installed. Check this by running"
#~ " ``nvcc --version`` or ``cat "
#~ "/usr/local/cuda/version.txt``"
#~ msgstr ""

#~ msgid ""
#~ "If you don't have it - go "
#~ "ahead to `this website "
#~ "<https://developer.nvidia.com/cuda-downloads>`_ and "
#~ "download it."
#~ msgstr ""

#~ msgid ""
#~ "These instructions were copied from the"
#~ " webiste above for x86_64 architecture"
#~ msgstr ""

#~ msgid ""
#~ "wget "
#~ "https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64"
#~ "/cuda-ubuntu1804.pin\n"
#~ "sudo mv cuda-ubuntu1804.pin "
#~ "/etc/apt/preferences.d/cuda-repository-pin-600\n"
#~ "wget "
#~ "http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers"
#~ "/cuda-repo-"
#~ "ubuntu1804-10-1-local-10.1.243-418.87.00_1.0-1_amd64.deb\n"
#~ "sudo dpkg -i cuda-repo-"
#~ "ubuntu1804-10-1-local-10.1.243-418.87.00_1.0-1_amd64.deb\n"
#~ "sudo apt-key add /var/cuda-"
#~ "repo-10-1-local-10.1.243-418.87.00/7fa2af80.pub\n"
#~ "sudo apt-get update\n"
#~ "sudo apt-get -y install cuda"
#~ msgstr ""

