# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Taichi Developers
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.6.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-16 17:29+0800\n"
"PO-Revision-Date: 2020-06-18 21:42+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_CN\n"
"X-Generator: Poedit 2.3.1\n"

#: ../../versioning_releases.rst:2
msgid "Versioning and releases"
msgstr "版本管理与发布"

#: ../../versioning_releases.rst:5
msgid "Pre-1.0 versioning"
msgstr "1.0 之前的版本"

#: ../../versioning_releases.rst:7
msgid "Taichi follows `Semantic Versioning 2.0.0 <https://semver.org/>`_."
msgstr "Taichi 遵循 `Semantic Versioning 2.0.0 <https://semver.org/>`_ 的标准."

#: ../../versioning_releases.rst:9
msgid ""
"Since Taichi is still under version 1.0.0, we use minor version bumps (e.g., "
"``0.6.17->0.7.0``) for breaking API changes, and patch version bumps (e.g., "
"``0.6.9->0.6.10``) for backward-compatible changes."
msgstr ""
"目前 Taichi 还处在1.0.0版本以下的迭代，我们使用次版本变更（例如，``0.6.17-"
">0.7.0``）来表示 API 的改版，使用补丁版本变更（例如，``0.6.9->0.6.10``）来代表"
"向后兼容的变化。"

#: ../../versioning_releases.rst:14
msgid "Workflow: releasing a new version"
msgstr "工作流：发布新版本"

#: ../../versioning_releases.rst:16
msgid ""
"Trigger a Linux build on `Jenkins <http://f11.csail.mit.edu:8080/job/taichi/"
">`_ to see if CUDA passes all tests. Note that Jenkins is the only build bot "
"we have that tests CUDA. (This may take half an hour.)"
msgstr ""
"在 `Jenkins <http://f11.csail.mit.edu:8080/job/taichi/>`_ 上触发 Linux 下的构"
"建，以查看 CUDA 是否通过了所有测试。请注意，我们仅用 Jenkins 进行 CUDA 构建测"
"试。(整个过程可能需要半个小时)"

#: ../../versioning_releases.rst:18
msgid ""
"Create a branch for the release PR, forking from the latest commit of the "
"``master`` branch."
msgstr "请克隆 ``master`` 分支的最新一次提交，并为提出 PR 新建一个协助分支。"

#: ../../versioning_releases.rst:20
msgid ""
"Update Taichi version number at the beginning of ``CMakeLists.txt``. For "
"example, change ``SET(TI_VERSION_PATCH 9)`` to ``SET(TI_VERSION_PATCH 10)``."
msgstr ""
"更新 ``CMakeLists.txt`` 开头的 Taichi 版本号。例如，将 ``SET(TI_VERSION_PATCH "
"9)`` 改为 ``SET(TI_VERSION_PATCH 10)``。"

#: ../../versioning_releases.rst:21
msgid "Rerun cmake so that ``docs/version`` gets updated."
msgstr "重新运行 cmake 以更新 ``docs/version`` 。"

#: ../../versioning_releases.rst:22
msgid "commit with message \"[release] vX.Y.Z\", e.g. \"[release] v0.6.10\"."
msgstr "提交说明的格式应该为 “[release] vX.Y.Z”，例如 “[release] v0.6.10”。"

#: ../../versioning_releases.rst:23
msgid ""
"You should see two changes in this commit: one line in ``CMakeLists.txt`` and "
"one line in ``docs/version``."
msgstr ""
"你应该可以在这次提交中看到有两处更改：一处在 ``CMakeLists.txt`` ，另一处在 "
"``docs/version`` 。"

#: ../../versioning_releases.rst:24
msgid "Execute ``ti changelog`` and save its outputs. You will need this later."
msgstr "执行 ``ti changelog`` 并保存其输出。你将会在稍后用到它。"

#: ../../versioning_releases.rst:26
msgid ""
"Open a PR titled \"[release] vX.Y.Z\" with the branch and commit you just now "
"created."
msgstr "从你刚刚创建的分支发起一个 PR ，PR 的标题应该为 \"[release] vX.Y.Z\" 。"

#: ../../versioning_releases.rst:28
msgid ""
"Use the ``ti changelog`` output you saved in the previous step as the content "
"of the PR description."
msgstr "使用你在上一步保存的 ``ti changelog`` 输出，用它作为 PR 的描述内容。"

#: ../../versioning_releases.rst:29
msgid ""
"Wait for all the checks and build bots to complete. (This step may take up to "
"two hours)."
msgstr "等待所有检查和构建工具完成。(这一步可能需要花费两个小时)。"

#: ../../versioning_releases.rst:31
msgid "Squash and merge the PR."
msgstr "合并 PR。"

#: ../../versioning_releases.rst:32
msgid ""
"Trigger the Linux build on Jenkins, again, so that Linux packages are "
"uploaded to PyPI."
msgstr "再次触发 Jenkins 上的 Linux 构建，以便将 Linux 包上传到 PyPI。"

#: ../../versioning_releases.rst:33
msgid ""
"Wait for all build bots to finish. This step uploads PyPI packages for OS X "
"and Windows. You may have to wait for up to two hours."
msgstr ""
"等待所有构建工具完成工作。这一步将会为 OS X 和 Windows 上传 PyPI 包。你可能需"
"要等待两个小时。"

#: ../../versioning_releases.rst:34
msgid ""
"Update the ``stable`` branch so that the head of that branch is your release "
"commit on ``master``."
msgstr ""
"更新 ``stable`` 分支，使该分支的头(head)指向你在 ``master`` 上刚发布的提交。"

#: ../../versioning_releases.rst:36
msgid ""
"Draft a new release `(here) <https://github.com/taichi-dev/taichi/releases>`_:"
msgstr ""
"起草新版本 `(在这里进入) <https://github.com/taichi-dev/taichi/releases>`_:"

#: ../../versioning_releases.rst:38
msgid "The title should be \"vX.Y.Z\"."
msgstr "标题格式应该为 \"vX.Y.Z\"。"

#: ../../versioning_releases.rst:39
msgid "The tag should be \"vX.Y.Z\"."
msgstr "标签格式应该为 \"vX.Y.Z\"。"

#: ../../versioning_releases.rst:40
msgid "Target should be \"recent commit\" -> the release commit."
msgstr "目标(Target)应该由 “recent commit” -> release commit。"

#: ../../versioning_releases.rst:41
msgid ""
"The release description should be copy-pasted from the release PR description."
msgstr "发布描述应该从提交时的 PR 描述中复制粘贴过来。"

#: ../../versioning_releases.rst:42
msgid "Click the \"Publish release\" button."
msgstr "点击 \"Publish release\" 按钮."

#: ../../versioning_releases.rst:45
msgid "Release cycle"
msgstr "发布周期"

#: ../../versioning_releases.rst:47
msgid "Taichi releases new versions twice per week:"
msgstr "目前 Taichi 每周会发布两次新版本:"

#: ../../versioning_releases.rst:49
msgid "The first release happens on Wednesdays."
msgstr "第一次发布日期在周三。"

#: ../../versioning_releases.rst:50
msgid "The second release happens on Saturdays."
msgstr "第二次发布日期在周六。"

#: ../../versioning_releases.rst:52
msgid "Additional releases may happen if anything needs an urgent fix."
msgstr "另外，如果有任何 BUG 需要被紧急修复，可能会额外发布补丁。"
