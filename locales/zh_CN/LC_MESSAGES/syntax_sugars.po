# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-24 11:24+0800\n"
"PO-Revision-Date: 2020-05-12 15:58+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_CN\n"
"X-Generator: Poedit 2.3.1\n"

#: ../../syntax_sugars.rst:2
msgid "Syntax sugars"
msgstr "语法糖"

#: ../../syntax_sugars.rst:5
msgid "Aliases"
msgstr "别名"

#: ../../syntax_sugars.rst:7
msgid ""
"Creating aliases for global variables and functions with cumbersome names "
"can sometimes improve readability. In Taichi, this can be done by "
"assigning kernel and function local variables with ``ti.static()``, which "
"forces Taichi to use standard python pointer assignement."
msgstr ""
"有时为命名繁琐的全局变量和函数创建别名可以提高可读性。 在Taichi中，这可以"
"通过使用 ``ti.static()`` 分配内核和函数局部变量实现，这会迫使Taichi使用标"
"准的python指针分配。"

#: ../../syntax_sugars.rst:9
msgid "For example, consider the simple kernel:"
msgstr "例如，考虑下面这个简单的内核："

#: ../../syntax_sugars.rst:11
msgid ""
"@ti.kernel\n"
"def my_kernel():\n"
"  for i, j in tensor_a:\n"
"    tensor_b[i, j] = some_function(tensor_a[i, j])"
msgstr ""
"@ti.kernel\n"
"def my_kernel():\n"
"  for i, j in tensor_a:\n"
"    tensor_b[i, j] = some_function(tensor_a[i, j])"

#: ../../syntax_sugars.rst:18
msgid "The tensors and function be aliased to new names with ``ti.static``:"
msgstr "张量和函数使用 ``ti.static`` 别名为新名称："

#: ../../syntax_sugars.rst:20
msgid ""
"@ti.kernel\n"
"def my_kernel():\n"
"  a, b, fun = ti.static(tensor_a, tensor_b, some_function)\n"
"  for i,j in a:\n"
"    b[i,j] = fun(a[i,j])"
msgstr ""
"@ti.kernel\n"
"def my_kernel():\n"
"  a, b, fun = ti.static(tensor_a, tensor_b, some_function)\n"
"  for i,j in a:\n"
"    b[i,j] = fun(a[i,j])"

#: ../../syntax_sugars.rst:30
msgid ""
"Aliases can also be created for class members and methods, which can help "
"prevent cluttering objective data-oriented programming code with ``self``."
msgstr ""
"还可以为类成员和方法创建别名，这有助于防止含有 ``self`` 的面向对象编"
"程代码混乱。"

#: ../../syntax_sugars.rst:32
msgid ""
"For example, consider class kernel to compute the 2-D laplacian of some "
"tensor:"
msgstr "例如，考虑使用类内核来计算某个张量的二维拉普拉斯算子："

#: ../../syntax_sugars.rst:34
msgid ""
"@ti.kernel\n"
"def compute_laplacian(self):\n"
"  for i, j in a:\n"
"    self.b[i, j] = (self.a[i + 1,j] - 2.0*self.a[i, j] + self.a[i-1, j])/"
"(self.dx**2) \\\n"
"                + (self.a[i,j + 1] - 2.0*self.a[i, j] + self.a[i, j-1])/"
"(self.dy**2)"
msgstr ""
"@ti.kernel\n"
"def compute_laplacian(self):\n"
"  for i, j in a:\n"
"    self.b[i, j] = (self.a[i + 1,j] - 2.0*self.a[i, j] + self.a[i-1, j])/"
"(self.dx**2) \\\n"
"                + (self.a[i,j + 1] - 2.0*self.a[i, j] + self.a[i, j-1])/"
"(self.dy**2)"

#: ../../syntax_sugars.rst:42
msgid "Using ``ti.static()``, it can be simplified to:"
msgstr "使用 ``ti.static()`` ，这可以简化为："

#: ../../syntax_sugars.rst:44
msgid ""
"@ti.kernel\n"
"def compute_laplacian(self):\n"
"  a,b,dx,dy = ti.static(self.a,self.b,self.dx,self.dy)\n"
"  for i,j in a:\n"
"    b[i,j] = (a[i+1, j] - 2.0*a[i, j] + a[i-1, j])/(dx**2) \\\n"
"           + (a[i, j+1] - 2.0*a[i, j] + a[i, j-1])/(dy**2)"
msgstr ""
"@ti.kernel\n"
"def compute_laplacian(self):\n"
"  a,b,dx,dy = ti.static(self.a,self.b,self.dx,self.dy)\n"
"  for i,j in a:\n"
"    b[i,j] = (a[i+1, j] - 2.0*a[i, j] + a[i-1, j])/(dx**2) \\\n"
"           + (a[i, j+1] - 2.0*a[i, j] + a[i, j-1])/(dy**2)"

#: ../../syntax_sugars.rst:55
msgid ""
"``ti.static`` can also be used in combination with ``if`` (compile-time "
"branching) and ``for`` (compile-time unrolling). See :ref:`meta` for more "
"details."
msgstr ""
"``ti.static`` 还可与 ``if``（编译时分支）和 ``for`` （编译时展开）结合使"
"用。 更多相关详细信息，请参见 :ref:`meta` 。"

#: ../../syntax_sugars.rst:57
msgid ""
"Here, we are using it for *compile-time const values*, i.e. the **tensor/"
"function handles** are constants at compile time."
msgstr ""
"在这里，我们将其用于 *编译时常量值* ，即 ``张量/函数句柄`` 在编译时是常"
"量。"
