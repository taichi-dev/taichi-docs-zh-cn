# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Taichi Developers
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.6.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-07 01:24-0400\n"
"PO-Revision-Date: 2020-05-14 10:20+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_CN\n"
"X-Generator: Poedit 2.3.1\n"

#: ../../gui.rst:4
msgid "GUI system"
msgstr "GUI系统"

#: ../../gui.rst:6
msgid ""
"Taichi has a built-in GUI system to help users display graphic results easier."
msgstr "Taichi具有内置的GUI系统，可帮助用户更轻松地显示图形结果。"

#: ../../gui.rst:10
msgid "Create a window"
msgstr "创建一个窗口"

#: ../../gui.rst
msgid "Parameters"
msgstr "参量"

#: ../../gui.rst:15
msgid "(string) the window title"
msgstr "（字符串）窗口标题"

#: ../../gui.rst:16
msgid "(scalar or tuple) resolution / size of the window"
msgstr "（标量或元组）分辨率/窗口大小"

#: ../../gui.rst:17
msgid "(optional, RGB hex) background color of the window"
msgstr "（可选，RGB十六进制）窗口的背景颜色"

#: ../../gui.rst
msgid "Returns"
msgstr "返回"

#: ../../gui.rst:18
msgid "(GUI) an object represents the window"
msgstr "（GUI）对象代表窗口"

#: ../../gui.rst:20
msgid "Create a window. If ``res`` is scalar, then width will be equal to height."
msgstr "创建一个窗口。 如果 ``res`` 是标量，则宽度将等于高度。"

#: ../../gui.rst:23
msgid "This creates a window whose width is 1024, height is 768:"
msgstr "这将创建一个宽度为1024，高度为768的窗口："

#: ../../gui.rst:27
msgid "gui = ti.GUI('Window Title', (1024, 768))"
msgstr "gui = ti.GUI('Window Title', (1024, 768))"

#: ../../gui.rst:32 ../../gui.rst:54 ../../gui.rst:90 ../../gui.rst:100
#: ../../gui.rst:114 ../../gui.rst:125 ../../gui.rst:136
msgid "(GUI) the window object"
msgstr "(GUI)窗口对象"

#: ../../gui.rst:33
msgid "(optional, string) see notes below"
msgstr "（可选，字符串）请参阅以下注释"

#: ../../gui.rst:35
msgid "Show the window on the screen."
msgstr "在屏幕上显示窗口。"

#: ../../gui.rst:38
msgid ""
"If `filename` is specified, screenshot will be saved to the file specified by "
"the name. For example, this screenshots each frame of the window, and save it "
"in ``.png``'s:"
msgstr ""
"如果指定了 `文件名` ，则屏幕截图将保存到该名称指定的文件中。 例如，下列代码将窗"
"口的每个帧进行截图，并保存在一系列 ``.png`` 中："

#: ../../gui.rst:42
msgid ""
"for frame in range(10000):\n"
"    render(img)\n"
"    gui.set_image(img)\n"
"    gui.show(f'{frame:06d}.png')"
msgstr ""
"for frame in range(10000):\n"
"    render(img)\n"
"    gui.set_image(img)\n"
"    gui.show(f'{frame:06d}.png')"

#: ../../gui.rst:49
msgid "Paint a window"
msgstr "画一个窗口"

#: ../../gui.rst:55
msgid "(np.array or Tensor) tensor containing the image, see notes below"
msgstr "（numpy 数组或 Taichi 张量）包含图像的张量，请参见下面的注释"

#: ../../gui.rst:57
msgid "Set a image to display on the window."
msgstr "设置要在窗口上显示的图像。"

#: ../../gui.rst:59
msgid ""
"The pixel, ``i`` from bottom to up, ``j`` from left to right, is set to the "
"value of ``img[i, j]``."
msgstr "从下到上第 ``i`` 个，从左到右第 ``j`` 个像素，显示的是 ``img[i, j]`` 的值。"

#: ../../gui.rst:62
msgid "If the window size is ``(x, y)``, then the ``img`` must be one of:"
msgstr "如果窗口大小是 ``(x, y)`` ，则 ``img`` 必须是以下之一："

#: ../../gui.rst:64
msgid "``ti.var(shape=(x, y))``, a grey-scale image"
msgstr "``ti.var(shape=(x, y))`` ，灰度图像"

#: ../../gui.rst:66
msgid "``ti.var(shape=(x, y, 3))``, where `3` is for `(r, g, b)` channels"
msgstr "``ti.var(shape=(x, y, 3))`` ，其中 `3` 代表 `(r, g, b)` 通道"

#: ../../gui.rst:68
msgid "``ti.Vector(3, shape=(x, y))`` (see :ref:`vector`)"
msgstr "``ti.Vector(3, shape=(x, y))`` （参见 :ref:`vector`）"

#: ../../gui.rst:70
msgid "``np.ndarray(shape=(x, y))``"
msgstr "``np.ndarray(shape=(x, y))``"

#: ../../gui.rst:72
msgid "``np.ndarray(shape=(x, y, 3))``"
msgstr "``np.ndarray(shape=(x, y, 3))``"

#: ../../gui.rst:75
msgid "The data type of ``img`` must be one of:"
msgstr " ``img`` 的数据类型必须是以下之一："

#: ../../gui.rst:77
msgid "float32, clamped into [0, 1]"
msgstr "float32，固定为 [0, 1]"

#: ../../gui.rst:79
msgid "float64, clamped into [0, 1]"
msgstr "float64，固定为 [0, 1]"

#: ../../gui.rst:81
msgid "uint8, range [0, 255]"
msgstr "uint8，范围 [0, 255]"

#: ../../gui.rst:83
msgid "uint16, range [0, 65535]"
msgstr "uint16，范围 [0, 65535]"

#: ../../gui.rst:85
msgid "uint32, range [0, UINT_MAX]"
msgstr "uint32，范围 [0, UINT_MAX]"

#: ../../gui.rst:91
msgid "(tuple of 2) the position of circle"
msgstr "（2元组）圆的位置"

#: ../../gui.rst:92
msgid "(optional, RGB hex) color to fill the circle"
msgstr "（可选，RGB十六进制）颜色填充圆圈"

#: ../../gui.rst:93 ../../gui.rst:103
msgid "(optional, scalar) the radius of circle"
msgstr "（可选，标量）圆的半径"

#: ../../gui.rst:95
msgid "Draw a solid circle."
msgstr "画一个实心圆。"

#: ../../gui.rst:101
msgid "(np.array) the position of circles"
msgstr "（numpy 数组）一系列圆的位置"

#: ../../gui.rst:102
msgid "(optional, RGB hex or np.array of uint32) color(s) to fill circles"
msgstr "（可选，RGB十六进制或 uint32 的 numpy 数组）颜色以填充圆圈"

#: ../../gui.rst:105
msgid "Draw solid circles."
msgstr "画多个实心圆。"

#: ../../gui.rst:109
msgid ""
"If ``color`` is a numpy array, circle at ``pos[i]`` will be colored with "
"``color[i]``, therefore it must have the same size with ``pos``."
msgstr ""
"如果 ``color`` 是一个 numpy 数组，则位于 ``pos[i]`` 的圆圈将使用 ``color[i]`` 作为颜"
"色，因此 ``color`` 的数组长度必须与 ``pos`` 相同。"

#: ../../gui.rst:115
msgid "(tuple of 2) the first end point position of line"
msgstr "（2元组）直线的第一个端点位置"

#: ../../gui.rst:116
msgid "(tuple of 2) the second end point position of line"
msgstr "（2元组）直线的第二个端点位置"

#: ../../gui.rst:117
msgid "(optional, RGB hex) the color of line"
msgstr "（可选，RGB十六进制）线条颜色"

#: ../../gui.rst:118
msgid "(optional, scalar) the width of line"
msgstr "（可选，标量）线的宽度"

#: ../../gui.rst:120
msgid "Draw a line."
msgstr "画一条线。"

#: ../../gui.rst:126
msgid "(tuple of 2) the first end point position of triangle"
msgstr "（2元组）三角形的第一个端点位置"

#: ../../gui.rst:127
msgid "(tuple of 2) the second end point position of triangle"
msgstr "（2元组）三角形的第二个端点位置"

#: ../../gui.rst:128
msgid "(tuple of 2) the third end point position of triangle"
msgstr "（2元组）三角形的第三个端点位置"

#: ../../gui.rst:129
msgid "(optional, RGB hex) the color to fill the triangle"
msgstr "（可选，RGB十六进制）填充三角形的颜色"

#: ../../gui.rst:131
msgid "Draw a solid triangle."
msgstr "画一个实心三角形。"

#: ../../gui.rst:137
msgid "(tuple of 2) the top-left point position of rectangle"
msgstr "（2元组）矩形的左上角位置"

#: ../../gui.rst:138
msgid "(tuple of 2) the bottom-right point position of rectangle"
msgstr "（2元组）矩形的右下角位置"

#: ../../gui.rst:139
msgid "(optional, RGB hex) the color of stroke line"
msgstr "（可选，RGB十六进制）描边线的颜色"

#: ../../gui.rst:140
msgid "(optional, scalar) the width of stroke line"
msgstr "（可选，标量）描边线的宽度"

#: ../../gui.rst:142
msgid "Draw a hollow rectangle."
msgstr "画一个空心的矩形。"

#: ../../gui.rst:146
msgid "Event processing"
msgstr "事件处理"

#: ../../gui.rst:148
msgid ""
"Every event have a key and type. *Event key* is the key that you pressed on "
"keyboard or mouse, can be one of:"
msgstr ""
"每个事件都有一个 ``key`` 和 ``type``。 ``key`` 是您在键盘或鼠标上按下的键，可以是以下之"
"一："

#: ../../gui.rst:153
msgid ""
"ti.GUI.ESCAPE\n"
"ti.GUI.SHIFT\n"
"ti.GUI.LEFT\n"
"'a'\n"
"'b'\n"
"...\n"
"ti.GUI.LMB\n"
"ti.GUI.RMB"
msgstr ""
"ti.GUI.ESCAPE\n"
"ti.GUI.SHIFT\n"
"ti.GUI.LEFT\n"
"'a'\n"
"'b'\n"
"...\n"
"ti.GUI.LMB\n"
"ti.GUI.RMB"

#: ../../gui.rst:162
msgid ""
"*Event type* is the type of event, for now, there are just three type of event:"
msgstr "``type`` 是事件的类型，目前只有三种类型的事件："

#: ../../gui.rst:166
msgid ""
"ti.GUI.RELEASE  # key up\n"
"ti.GUI.PRESS    # key down\n"
"ti.GUI.MOTION   # mouse moved"
msgstr ""
"ti.GUI.RELEASE  # 松开键\n"
"ti.GUI.PRESS   # 按下键\n"
"ti.GUI.MOTION   #鼠标移动"

#: ../../gui.rst:171
msgid ""
"A *event filter* is a list combined of *key*, *type* and *(type, key)* tuple, e."
"g.:"
msgstr ""
"*事件过滤器* 是一个由 ``key``，``type`` 和 ``(type, key)`` 元组组成的列表，例如："

#: ../../gui.rst:173
msgid ""
"# if ESC pressed or released:\n"
"gui.get_event(ti.GUI.ESCAPE)\n"
"\n"
"# if any key is pressed:\n"
"gui.get_event(ti.GUI.PRESS)\n"
"\n"
"# if ESC pressed or SPACE released:\n"
"gui.get_event((ti.GUI.PRESS, ti.GUI.ESCAPE), (ti.GUI.RELEASE, ti.GUI.SPACE))"
msgstr ""
"# 如果按下或释放ESC:\n"
"gui.get_event(ti.GUI.ESCAPE)\n"
"\n"
"# 如果按下任何键:\n"
"gui.get_event(ti.GUI.PRESS)\n"
"\n"
"# 如果按ESC或释放SPACE:\n"
"gui.get_event((ti.GUI.PRESS, ti.GUI.ESCAPE), (ti.GUI.RELEASE, ti.GUI.SPACE))"

#: ../../gui.rst:187 ../../gui.rst:212 ../../gui.rst:230 ../../gui.rst:250
msgid "(GUI)"
msgstr "（GUI）"

#: ../../gui.rst:188 ../../gui.rst:213
msgid "(optional, EventFilter) filter out matched events"
msgstr "（可选，事件过滤器）过滤掉匹配的事件"

#: ../../gui.rst:189
msgid "(bool) ``False`` if there is no pending event, vise versa"
msgstr "(bool) 如果没有待处理的事件，返回 ``False``，反之亦然"

#: ../../gui.rst:191
msgid "Try to pop a event from the queue, and store it in ``gui.event``."
msgstr "尝试从队列中弹出事件，并将其存储在 ``gui.event``中。"

#: ../../gui.rst:193 ../../gui.rst:253
msgid "For example:"
msgstr "例如："

#: ../../gui.rst:197
msgid ""
"while gui.get_event():\n"
"    print('Event key', gui.event.key)"
msgstr ""
"while gui.get_event():\n"
"    print('Event key', gui.event.key)"

#: ../../gui.rst:201
msgid "For example, loop until ESC is pressed:"
msgstr "例如，循环直到按下ESC："

#: ../../gui.rst:205
msgid ""
"gui = ti.GUI('Title', (640, 480))\n"
"while not gui.get_event(ti.GUI.ESCAPE):\n"
"    gui.set_image(img)\n"
"    gui.show()"
msgstr ""
"gui = ti.GUI('Title', (640, 480))\n"
"while not gui.get_event(ti.GUI.ESCAPE):\n"
"    gui.set_image(img)\n"
"    gui.show()"

#: ../../gui.rst:214
msgid "(generator) a python generator, see below"
msgstr "（生成器）python生成器，请参见下文"

#: ../../gui.rst:216
msgid ""
"Basically the same as ``gui.get_event``, except for this one returns a "
"generator of events instead of storing into ``gui.event``:"
msgstr ""
"基本上与 ``gui.get_event`` 相同，只不过它返回一个事件生成器，而不是存储到 ``gui."
"event`` 中："

#: ../../gui.rst:220
msgid ""
"for e in gui.get_events():\n"
"    if e.key == ti.GUI.ESCAPE:\n"
"        exit()\n"
"    elif e.type == ti.GUI.SPACE:\n"
"        do_something()\n"
"    elif e.type in ['a', ti.GUI.LEFT]:\n"
"        ..."
msgstr ""
"for e in gui.get_events():\n"
"    if e.key == ti.GUI.ESCAPE:\n"
"        exit()\n"
"    elif e.type == ti.GUI.SPACE:\n"
"        do_something()\n"
"    elif e.type in ['a', ti.GUI.LEFT]:\n"
"        ..."

#: ../../gui.rst:231
msgid "(EventKey) keys you want to detect"
msgstr "(事件的 key) 您要检测的键"

#: ../../gui.rst:232
msgid "(bool) ``True`` if one of the keys pressed, vice versa"
msgstr "(bool) 其中一个键处于按下状态，返回 ``True``，反之亦然"

#: ../../gui.rst:236
msgid ""
"Must be used together with ``gui.get_event``, or it won't be updated! For "
"example:"
msgstr "必须与 ``gui.get_event`` 一起使用，否则将不会更新！ 例如："

#: ../../gui.rst:241
msgid ""
"while True:\n"
"    gui.get_event()  # must be called before is_pressed\n"
"    if gui.is_pressed('a', ti.GUI.LEFT):\n"
"        print('Go left!')\n"
"    elif gui.is_pressed('d', ti.GUI.RIGHT):\n"
"        print('Go right!')"
msgstr ""
"while True:\n"
"    gui.get_event()  # must be called before is_pressed\n"
"    if gui.is_pressed('a', ti.GUI.LEFT):\n"
"        print('Go left!')\n"
"    elif gui.is_pressed('d', ti.GUI.RIGHT):\n"
"        print('Go right!')"

#: ../../gui.rst:251
msgid "(tuple of 2) current cursor position within the window"
msgstr "（2元组）窗口中的当前光标位置"

#: ../../gui.rst:257
msgid "mouse_x, mouse_y = gui.get_cursor_pos()"
msgstr "mouse_x, mouse_y = gui.get_cursor_pos()"

#: ../../gui.rst:261
msgid "Image I/O"
msgstr "图片输入/输出"

#: ../../gui.rst:263
msgid ""
"img = ti.imread('hello.png')\n"
"ti.imshow(img, 'Window Title')\n"
"ti.imwrite(img, 'hello2.png')"
msgstr ""
"img = ti.imread('hello.png')\n"
"ti.imshow(img, 'Window Title')\n"
"ti.imwrite(img, 'hello2.png')"

#: ../../gui.rst:269
msgid "TODO: complete here"
msgstr "TODO：在这里完成"
