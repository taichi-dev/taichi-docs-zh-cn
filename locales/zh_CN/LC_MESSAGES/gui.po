# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Taichi Developers
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.6.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-20 15:41+0800\n"
"PO-Revision-Date: 2020-05-21 00:26+0800\n"
"Last-Translator: \n"
"Language: zh_CN\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"X-Generator: Poedit 2.3.1\n"

#: ../../gui.rst:4
msgid "GUI system"
msgstr "GUI系统"

#: ../../gui.rst:6
msgid "Taichi has a built-in GUI system to help users visualize results."
msgstr "Taichi具有内置的GUI系统，可帮助用户可视化结果。"

#: ../../gui.rst:10
msgid "Create a window"
msgstr "创建一个窗口"

#: ../../gui.rst
msgid "Parameters"
msgstr "参量"

#: ../../gui.rst:15
msgid "(string) the window title"
msgstr "（字符串）窗口标题"

#: ../../gui.rst:16
msgid "(scalar or tuple) resolution / size of the window"
msgstr "（标量或元组）分辨率/窗口大小"

#: ../../gui.rst:17
msgid "(optional, RGB hex) background color of the window"
msgstr "（可选，RGB十六进制）窗口的背景颜色"

#: ../../gui.rst
msgid "Returns"
msgstr "返回"

#: ../../gui.rst:18
msgid "(GUI) an object represents the window"
msgstr "（GUI）对象代表窗口"

#: ../../gui.rst:20
msgid "Create a window. If ``res`` is scalar, then width will be equal to height."
msgstr "创建一个窗口。 如果 ``res`` 是标量，则宽度将等于高度。"

#: ../../gui.rst:23
msgid "The following code creates a window of resolution ``640x360``:"
msgstr "以下代码创建了一个分辨率为 ``640x360`` 的窗口："

#: ../../gui.rst:27
msgid "gui = ti.GUI('Window Title', (640, 360))"
msgstr "gui = ti.GUI('Window Title', (640, 360))"

#: ../../gui.rst:32 ../../gui.rst:55 ../../gui.rst:97 ../../gui.rst:107
#: ../../gui.rst:122 ../../gui.rst:133 ../../gui.rst:144
msgid "(GUI) the window object"
msgstr "(GUI)窗口对象"

#: ../../gui.rst:33
msgid "(optional, string) see notes below"
msgstr "（可选，字符串）请参阅以下注释"

#: ../../gui.rst:35
msgid "Show the window on the screen."
msgstr "在屏幕上显示窗口。"

#: ../../gui.rst:38
msgid ""
"If ``filename`` is specified, a screenshot will be saved to the file specified "
"by the name. For example, the following saves frames of the window to ``."
"png``'s:"
msgstr ""
"如果指定了 ``文件名`` ，则屏幕截图将被保存到该名称指定的文件中。 例如，以下将窗"
"口的框架保存到 ``.png`` 文件中："

#: ../../gui.rst:43
msgid ""
"for frame in range(10000):\n"
"    render(img)\n"
"    gui.set_image(img)\n"
"    gui.show(f'{frame:06d}.png')"
msgstr ""
"for frame in range(10000):\n"
"    render(img)\n"
"    gui.set_image(img)\n"
"    gui.show(f'{frame:06d}.png')"

#: ../../gui.rst:50
msgid "Paint on a window"
msgstr "在窗口上作画"

#: ../../gui.rst:56
msgid "(np.array or Tensor) tensor containing the image, see notes below"
msgstr "（numpy 数组或 Taichi 张量）包含图像的张量，请参见下面的注释"

#: ../../gui.rst:58
msgid "Set an image to display on the window."
msgstr "设置要在窗口上显示的图像。"

#: ../../gui.rst:60
msgid ""
"The image pixels are set from the values of ``img[i, j]``, where ``i`` "
"indicates the horizontal coordinates (from left to right) and ``j`` the "
"vertical coordinates (from bottom to top)."
msgstr ""
"图像像素由 ``img[i, j]`` 的值设定，其中 ``i`` 表示水平坐标（从左到右）， ``j`` "
"表示垂直坐标（从下到上） 。"

#: ../../gui.rst:64
msgid "If the window size is ``(x, y)``, then ``img`` must be one of:"
msgstr "如果窗口大小是 ``(x, y)`` ，则 ``img`` 必须是以下之一："

#: ../../gui.rst:66
msgid "``ti.var(shape=(x, y))``, a grey-scale image"
msgstr "``ti.var(shape=(x, y))`` ，灰度图像"

#: ../../gui.rst:68
msgid "``ti.var(shape=(x, y, 3))``, where `3` is for ``(r, g, b)`` channels"
msgstr "``ti.var(shape=(x, y, 3))`` ，其中 `3` 代表 ``(r, g, b)`` 通道"

#: ../../gui.rst:70
msgid "``ti.Vector(3, shape=(x, y))`` (see :ref:`vector`)"
msgstr "``ti.Vector(3, shape=(x, y))`` （参见 :ref:`vector`）"

#: ../../gui.rst:72
msgid "``np.ndarray(shape=(x, y))``"
msgstr "``np.ndarray(shape=(x, y))``"

#: ../../gui.rst:74
msgid "``np.ndarray(shape=(x, y, 3))``"
msgstr "``np.ndarray(shape=(x, y, 3))``"

#: ../../gui.rst:77
msgid "The data type of ``img`` must be one of:"
msgstr "``img`` 的数据类型必须是以下之一："

#: ../../gui.rst:79
msgid "``uint8``, range ``[0, 255]``"
msgstr "``uint8``，范围 ``[0, 255]``"

#: ../../gui.rst:81
msgid "``uint16``, range ``[0, 65535]``"
msgstr "``uint16``，范围 ``[0, 65535]``"

#: ../../gui.rst:83
msgid "``uint32``, range ``[0, 4294967295]``"
msgstr "``uint32``，范围 ``[0, 4294967295]``"

#: ../../gui.rst:85
msgid "``float32``, range ``[0, 1]``"
msgstr "``float32``，范围 ``[0, 1]``"

#: ../../gui.rst:87
msgid "``float64``, range ``[0, 1]``"
msgstr "``float64``，范围 ``[0, 1]``"

#: ../../gui.rst:91
msgid ""
"When using ``float32`` or ``float64`` as the data type, ``img`` entries will be "
"clipped into range ``[0, 1]``."
msgstr ""
"当使用 ``float32`` 或 ``float64`` 作为数据类型时，``img`` 条目将被裁剪为 ``[0, "
"1]`` 范围。"

#: ../../gui.rst:98
msgid "(tuple of 2) the position of the circle"
msgstr "（2元组）圆的位置"

#: ../../gui.rst:99
msgid "(optional, RGB hex) the color to fill the circle"
msgstr "（可选，RGB十六进制）颜色填充圆圈"

#: ../../gui.rst:100
msgid "(optional, scalar) the radius of the circle"
msgstr "（可选，标量）圆的半径"

#: ../../gui.rst:102
msgid "Draw a solid circle."
msgstr "画一个实心圆。"

#: ../../gui.rst:108
msgid "(np.array) the positions of the circles"
msgstr "（numpy 数组）一系列圆的位置"

#: ../../gui.rst:109
msgid "(optional, RGB hex or np.array of uint32) the color(s) to fill the circles"
msgstr "（可选，RGB十六进制或 uint32 的 numpy 数组）颜色以填充圆圈"

#: ../../gui.rst:110
msgid ""
"(optional, scalar or np.array of float32) the radius (radii) of the circles"
msgstr "（可选，float32的标量或np.array）圆的半径（半径）"

#: ../../gui.rst:112
msgid "Draw solid circles."
msgstr "画多个实心圆。"

#: ../../gui.rst:116
msgid ""
"If ``color`` is a numpy array, the circle at ``pos[i]`` will be colored with "
"``color[i]``. In this case, ``color`` must have the same size as ``pos``."
msgstr ""
"如果 ``color`` 是一个 numpy 数组，则位于 ``pos[i]`` 的圆圈将使用 ``color[i]`` 作"
"为颜色，因此 ``color`` 的数组长度必须与 ``pos`` 相同。"

#: ../../gui.rst:123
msgid "(tuple of 2) the first end point position of line"
msgstr "（2元组）直线的第一个端点位置"

#: ../../gui.rst:124
msgid "(tuple of 2) the second end point position of line"
msgstr "（2元组）直线的第二个端点位置"

#: ../../gui.rst:125
msgid "(optional, RGB hex) the color of line"
msgstr "（可选，RGB十六进制）线条颜色"

#: ../../gui.rst:126
msgid "(optional, scalar) the width of line"
msgstr "（可选，标量）线的宽度"

#: ../../gui.rst:128
msgid "Draw a line."
msgstr "画一条线。"

#: ../../gui.rst:134
msgid "(tuple of 2) the first end point position of triangle"
msgstr "（2元组）三角形的第一个端点位置"

#: ../../gui.rst:135
msgid "(tuple of 2) the second end point position of triangle"
msgstr "（2元组）三角形的第二个端点位置"

#: ../../gui.rst:136
msgid "(tuple of 2) the third end point position of triangle"
msgstr "（2元组）三角形的第三个端点位置"

#: ../../gui.rst:137
msgid "(optional, RGB hex) the color to fill the triangle"
msgstr "（可选，RGB十六进制）填充三角形的颜色"

#: ../../gui.rst:139
msgid "Draw a solid triangle."
msgstr "画一个实心三角形。"

#: ../../gui.rst:145
msgid "(tuple of 2) the top-left point position of rectangle"
msgstr "（2元组）矩形的左上角位置"

#: ../../gui.rst:146
msgid "(tuple of 2) the bottom-right point position of rectangle"
msgstr "（2元组）矩形的右下角位置"

#: ../../gui.rst:147
msgid "(optional, RGB hex) the color of stroke line"
msgstr "（可选，RGB十六进制）描边线的颜色"

#: ../../gui.rst:148
msgid "(optional, scalar) the width of stroke line"
msgstr "（可选，标量）描边线的宽度"

#: ../../gui.rst:150
msgid "Draw a hollow rectangle."
msgstr "画一个空心的矩形。"

#: ../../gui.rst:154
msgid "Event processing"
msgstr "事件处理"

#: ../../gui.rst:156
msgid ""
"Every event have a key and type. *Event key* is the key that you pressed on "
"keyboard or mouse, can be one of:"
msgstr ""
"每个事件都有一个 ``key`` 和 ``type``。 ``key`` 是您在键盘或鼠标上按下的键，可以"
"是以下之一："

#: ../../gui.rst:161
msgid ""
"ti.GUI.ESCAPE\n"
"ti.GUI.SHIFT\n"
"ti.GUI.LEFT\n"
"'a'\n"
"'b'\n"
"...\n"
"ti.GUI.LMB\n"
"ti.GUI.RMB"
msgstr ""
"ti.GUI.ESCAPE\n"
"ti.GUI.SHIFT\n"
"ti.GUI.LEFT\n"
"'a'\n"
"'b'\n"
"...\n"
"ti.GUI.LMB\n"
"ti.GUI.RMB"

#: ../../gui.rst:170
msgid ""
"*Event type* is the type of event, for now, there are just three type of event:"
msgstr "``type`` 是事件的类型，目前只有三种类型的事件："

#: ../../gui.rst:174
msgid ""
"ti.GUI.RELEASE  # key up\n"
"ti.GUI.PRESS    # key down\n"
"ti.GUI.MOTION   # mouse moved"
msgstr ""
"ti.GUI.RELEASE  # 松开键\n"
"ti.GUI.PRESS   # 按下键\n"
"ti.GUI.MOTION   #鼠标移动"

#: ../../gui.rst:179
msgid ""
"A *event filter* is a list combined of *key*, *type* and *(type, key)* tuple, e."
"g.:"
msgstr ""
"*事件过滤器* 是一个由 ``key``，``type`` 和 ``(type, key)`` 元组组成的列表，例"
"如："

#: ../../gui.rst:181
msgid ""
"# if ESC pressed or released:\n"
"gui.get_event(ti.GUI.ESCAPE)\n"
"\n"
"# if any key is pressed:\n"
"gui.get_event(ti.GUI.PRESS)\n"
"\n"
"# if ESC pressed or SPACE released:\n"
"gui.get_event((ti.GUI.PRESS, ti.GUI.ESCAPE), (ti.GUI.RELEASE, ti.GUI.SPACE))"
msgstr ""
"# 如果按下或释放ESC:\n"
"gui.get_event(ti.GUI.ESCAPE)\n"
"\n"
"# 如果按下任何键:\n"
"gui.get_event(ti.GUI.PRESS)\n"
"\n"
"# 如果按ESC或释放SPACE:\n"
"gui.get_event((ti.GUI.PRESS, ti.GUI.ESCAPE), (ti.GUI.RELEASE, ti.GUI.SPACE))"

#: ../../gui.rst:195 ../../gui.rst:220 ../../gui.rst:238 ../../gui.rst:258
msgid "(GUI)"
msgstr "（GUI）"

#: ../../gui.rst:196 ../../gui.rst:221
msgid "(optional, EventFilter) filter out matched events"
msgstr "（可选，事件过滤器）过滤掉匹配的事件"

#: ../../gui.rst:197
msgid "(bool) ``False`` if there is no pending event, vise versa"
msgstr "(bool) 如果没有待处理的事件，返回 ``False``，反之亦然"

#: ../../gui.rst:199
msgid "Try to pop a event from the queue, and store it in ``gui.event``."
msgstr "尝试从队列中弹出事件，并将其存储在 ``gui.event`` 中。"

#: ../../gui.rst:201 ../../gui.rst:261
msgid "For example:"
msgstr "例如："

#: ../../gui.rst:205
msgid ""
"while gui.get_event():\n"
"    print('Event key', gui.event.key)"
msgstr ""
"while gui.get_event():\n"
"    print('Event key', gui.event.key)"

#: ../../gui.rst:209
msgid "For example, loop until ESC is pressed:"
msgstr "例如，循环直到按下ESC："

#: ../../gui.rst:213
msgid ""
"gui = ti.GUI('Title', (640, 480))\n"
"while not gui.get_event(ti.GUI.ESCAPE):\n"
"    gui.set_image(img)\n"
"    gui.show()"
msgstr ""
"gui = ti.GUI('Title', (640, 480))\n"
"while not gui.get_event(ti.GUI.ESCAPE):\n"
"    gui.set_image(img)\n"
"    gui.show()"

#: ../../gui.rst:222
msgid "(generator) a python generator, see below"
msgstr "（生成器）python生成器，请参见下文"

#: ../../gui.rst:224
msgid ""
"Basically the same as ``gui.get_event``, except for this one returns a "
"generator of events instead of storing into ``gui.event``:"
msgstr ""
"基本上与 ``gui.get_event`` 相同，只不过它返回一个事件生成器，而不是存储到 ``gui."
"event`` 中："

#: ../../gui.rst:228
msgid ""
"for e in gui.get_events():\n"
"    if e.key == ti.GUI.ESCAPE:\n"
"        exit()\n"
"    elif e.type == ti.GUI.SPACE:\n"
"        do_something()\n"
"    elif e.type in ['a', ti.GUI.LEFT]:\n"
"        ..."
msgstr ""
"for e in gui.get_events():\n"
"    if e.key == ti.GUI.ESCAPE:\n"
"        exit()\n"
"    elif e.type == ti.GUI.SPACE:\n"
"        do_something()\n"
"    elif e.type in ['a', ti.GUI.LEFT]:\n"
"        ..."

#: ../../gui.rst:239
msgid "(EventKey) keys you want to detect"
msgstr "(事件的 key) 您要检测的键"

#: ../../gui.rst:240
msgid "(bool) ``True`` if one of the keys pressed, vice versa"
msgstr "(bool) 其中一个键处于按下状态，返回 ``True``，反之亦然"

#: ../../gui.rst:244
msgid ""
"Must be used together with ``gui.get_event``, or it won't be updated! For "
"example:"
msgstr "必须与 ``gui.get_event`` 一起使用，否则将不会更新！ 例如："

#: ../../gui.rst:249
msgid ""
"while True:\n"
"    gui.get_event()  # must be called before is_pressed\n"
"    if gui.is_pressed('a', ti.GUI.LEFT):\n"
"        print('Go left!')\n"
"    elif gui.is_pressed('d', ti.GUI.RIGHT):\n"
"        print('Go right!')"
msgstr ""
"while True:\n"
"    gui.get_event()  # must be called before is_pressed\n"
"    if gui.is_pressed('a', ti.GUI.LEFT):\n"
"        print('Go left!')\n"
"    elif gui.is_pressed('d', ti.GUI.RIGHT):\n"
"        print('Go right!')"

#: ../../gui.rst:259
msgid "(tuple of 2) current cursor position within the window"
msgstr "（2元组）窗口中的当前光标位置"

#: ../../gui.rst:265
msgid "mouse_x, mouse_y = gui.get_cursor_pos()"
msgstr "mouse_x, mouse_y = gui.get_cursor_pos()"

#: ../../gui.rst:269
msgid "Image I/O"
msgstr "图片输入/输出"

#: ../../gui.rst:271
msgid ""
"img = ti.imread('hello.png')\n"
"ti.imshow(img, 'Window Title')\n"
"ti.imwrite(img, 'hello2.png')"
msgstr ""
"img = ti.imread('hello.png')\n"
"ti.imshow(img, 'Window Title')\n"
"ti.imwrite(img, 'hello2.png')"

#: ../../gui.rst:277
msgid "TODO: complete here"
msgstr "TODO：在这里完成"

#~ msgid "This creates a window whose width is 1024, height is 768:"
#~ msgstr "这将创建一个宽度为1024，高度为768的窗口："

#~ msgid ""
#~ "The pixel, ``i`` from bottom to up, ``j`` from left to right, is set to the "
#~ "value of ``img[i, j]``."
#~ msgstr ""
#~ "从下到上第 ``i`` 个，从左到右第 ``j`` 个像素，显示的是 ``img[i, j]`` 的值。"

#~ msgid "uint32, range [0, UINT_MAX]"
#~ msgstr "uint32，范围 [0, UINT_MAX]"
